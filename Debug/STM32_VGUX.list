
STM32_VGUX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  08003d6c  08003d6c  00013d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004330  08004330  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004330  08004330  00014330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004338  08004338  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000070  080043b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080043b0  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b07f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c5e  00000000  00000000  0002b11f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d8  00000000  00000000  0002cd80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f0  00000000  00000000  0002d558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023028  00000000  00000000  0002dc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a58  00000000  00000000  00050c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8fbe  00000000  00000000  000586c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121686  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002634  00000000  00000000  00121704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003d54 	.word	0x08003d54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003d54 	.word	0x08003d54

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <creerFeuille>:

#ifndef INC_HUFFMAN_H_
#include <huffman.h>
#endif

uint16_t creerFeuille(struct noeud * arbre[256], uint32_t tab[256]) {
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
	uint16_t caseArbreLibre = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 0; i < 256; i++) {
 80005ce:	2300      	movs	r3, #0
 80005d0:	81bb      	strh	r3, [r7, #12]
 80005d2:	e03b      	b.n	800064c <creerFeuille+0x8c>
		if(tab[i] > 0) {
 80005d4:	89bb      	ldrh	r3, [r7, #12]
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d031      	beq.n	8000646 <creerFeuille+0x86>
			arbre[caseArbreLibre] = (struct noeud*) malloc(sizeof(struct noeud));
 80005e2:	89fb      	ldrh	r3, [r7, #14]
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	18d4      	adds	r4, r2, r3
 80005ea:	2018      	movs	r0, #24
 80005ec:	f002 fc10 	bl	8002e10 <malloc>
 80005f0:	4603      	mov	r3, r0
 80005f2:	6023      	str	r3, [r4, #0]
			arbre[caseArbreLibre]->c = i;
 80005f4:	89fb      	ldrh	r3, [r7, #14]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	4413      	add	r3, r2
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	89ba      	ldrh	r2, [r7, #12]
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	701a      	strb	r2, [r3, #0]
			arbre[caseArbreLibre]->occurence = tab[i];
 8000604:	89bb      	ldrh	r3, [r7, #12]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	441a      	add	r2, r3
 800060c:	89fb      	ldrh	r3, [r7, #14]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	440b      	add	r3, r1
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6812      	ldr	r2, [r2, #0]
 8000618:	605a      	str	r2, [r3, #4]
			arbre[caseArbreLibre]->gauche = NULL;
 800061a:	89fb      	ldrh	r3, [r7, #14]
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
			arbre[caseArbreLibre]->droite = NULL;
 8000628:	89fb      	ldrh	r3, [r7, #14]
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	4413      	add	r3, r2
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
			//printFeuille(arbre[caseArbreLibre], arbre[caseArbreLibre]);
			caseArbreLibre++;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	3301      	adds	r3, #1
 800063a:	81fb      	strh	r3, [r7, #14]
			afficherTabArbreHuffman (arbre, caseArbreLibre);
 800063c:	89fb      	ldrh	r3, [r7, #14]
 800063e:	4619      	mov	r1, r3
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 f80b 	bl	800065c <afficherTabArbreHuffman>
	for(uint16_t i = 0; i < 256; i++) {
 8000646:	89bb      	ldrh	r3, [r7, #12]
 8000648:	3301      	adds	r3, #1
 800064a:	81bb      	strh	r3, [r7, #12]
 800064c:	89bb      	ldrh	r3, [r7, #12]
 800064e:	2bff      	cmp	r3, #255	; 0xff
 8000650:	d9c0      	bls.n	80005d4 <creerFeuille+0x14>
		}
	}

	return(caseArbreLibre);
 8000652:	89fb      	ldrh	r3, [r7, #14]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	bd90      	pop	{r4, r7, pc}

0800065c <afficherTabArbreHuffman>:
	printf("+-------------------------------+\n");
	printf("| Droite \t| %#09x \t|\n", arbre->droite);
	printf("+-------------------------------+\n");
}

void afficherTabArbreHuffman (struct noeud* arbre[256], uint32_t taille) {
 800065c:	b5b0      	push	{r4, r5, r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af02      	add	r7, sp, #8
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	printf("\n\n---------------------------------------------------------------------------------+\n");
 8000666:	4820      	ldr	r0, [pc, #128]	; (80006e8 <afficherTabArbreHuffman+0x8c>)
 8000668:	f002 fd12 	bl	8003090 <puts>
	printf(" Adresse \t | Caractere\t | Occurence\t | Gauche\t | Droite\t |\n");
 800066c:	481f      	ldr	r0, [pc, #124]	; (80006ec <afficherTabArbreHuffman+0x90>)
 800066e:	f002 fd0f 	bl	8003090 <puts>
	printf("---------------------------------------------------------------------------------+\n");
 8000672:	481f      	ldr	r0, [pc, #124]	; (80006f0 <afficherTabArbreHuffman+0x94>)
 8000674:	f002 fd0c 	bl	8003090 <puts>
	for(uint16_t i = 0; i<taille; i++) {
 8000678:	2300      	movs	r3, #0
 800067a:	81fb      	strh	r3, [r7, #14]
 800067c:	e02b      	b.n	80006d6 <afficherTabArbreHuffman+0x7a>
		printf("%#09x\t | %c\t\t | %d\t\t |  %#09x \t |  %#09x \t |\n", arbre[i], arbre[i]->c, arbre[i]->occurence, arbre[i]->gauche, arbre[i]->droite);
 800067e:	89fb      	ldrh	r3, [r7, #14]
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461d      	mov	r5, r3
 8000696:	89fb      	ldrh	r3, [r7, #14]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	685c      	ldr	r4, [r3, #4]
 80006a2:	89fb      	ldrh	r3, [r7, #14]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	89fa      	ldrh	r2, [r7, #14]
 80006b0:	0092      	lsls	r2, r2, #2
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	440a      	add	r2, r1
 80006b6:	6812      	ldr	r2, [r2, #0]
 80006b8:	6952      	ldr	r2, [r2, #20]
 80006ba:	9201      	str	r2, [sp, #4]
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	4623      	mov	r3, r4
 80006c0:	462a      	mov	r2, r5
 80006c2:	4601      	mov	r1, r0
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <afficherTabArbreHuffman+0x98>)
 80006c6:	f002 fc5b 	bl	8002f80 <iprintf>
		printf("---------------------------------------------------------------------------------+\n");
 80006ca:	4809      	ldr	r0, [pc, #36]	; (80006f0 <afficherTabArbreHuffman+0x94>)
 80006cc:	f002 fce0 	bl	8003090 <puts>
	for(uint16_t i = 0; i<taille; i++) {
 80006d0:	89fb      	ldrh	r3, [r7, #14]
 80006d2:	3301      	adds	r3, #1
 80006d4:	81fb      	strh	r3, [r7, #14]
 80006d6:	89fb      	ldrh	r3, [r7, #14]
 80006d8:	683a      	ldr	r2, [r7, #0]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d8cf      	bhi.n	800067e <afficherTabArbreHuffman+0x22>
	}
}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bdb0      	pop	{r4, r5, r7, pc}
 80006e6:	bf00      	nop
 80006e8:	08003e28 	.word	0x08003e28
 80006ec:	08003e80 	.word	0x08003e80
 80006f0:	08003ebc 	.word	0x08003ebc
 80006f4:	08003f10 	.word	0x08003f10

080006f8 <triArbre>:

void triArbre(struct noeud* arbre[256], uint32_t taille) {
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
  //Tri a bulle par ordre croissant
  for (uint16_t i = 0 ; i < taille-1; i++) {
 8000702:	2300      	movs	r3, #0
 8000704:	81fb      	strh	r3, [r7, #14]
 8000706:	e036      	b.n	8000776 <triArbre+0x7e>
	for (uint16_t j = 0 ; j < taille-i-1; j++) {
 8000708:	2300      	movs	r3, #0
 800070a:	81bb      	strh	r3, [r7, #12]
 800070c:	e029      	b.n	8000762 <triArbre+0x6a>
	  if (arbre[j]->occurence > arbre[j+1]->occurence) {
 800070e:	89bb      	ldrh	r3, [r7, #12]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	89bb      	ldrh	r3, [r7, #12]
 800071c:	3301      	adds	r3, #1
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	440b      	add	r3, r1
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d917      	bls.n	800075c <triArbre+0x64>
		uint32_t tmp = arbre[j];
 800072c:	89bb      	ldrh	r3, [r7, #12]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	60bb      	str	r3, [r7, #8]
		arbre[j] = arbre[j+1];
 8000738:	89bb      	ldrh	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	441a      	add	r2, r3
 8000742:	89bb      	ldrh	r3, [r7, #12]
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	440b      	add	r3, r1
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	601a      	str	r2, [r3, #0]
		arbre[j+1] = tmp;
 800074e:	89bb      	ldrh	r3, [r7, #12]
 8000750:	3301      	adds	r3, #1
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	4413      	add	r3, r2
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	601a      	str	r2, [r3, #0]
	for (uint16_t j = 0 ; j < taille-i-1; j++) {
 800075c:	89bb      	ldrh	r3, [r7, #12]
 800075e:	3301      	adds	r3, #1
 8000760:	81bb      	strh	r3, [r7, #12]
 8000762:	89ba      	ldrh	r2, [r7, #12]
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	6839      	ldr	r1, [r7, #0]
 8000768:	1acb      	subs	r3, r1, r3
 800076a:	3b01      	subs	r3, #1
 800076c:	429a      	cmp	r2, r3
 800076e:	d3ce      	bcc.n	800070e <triArbre+0x16>
  for (uint16_t i = 0 ; i < taille-1; i++) {
 8000770:	89fb      	ldrh	r3, [r7, #14]
 8000772:	3301      	adds	r3, #1
 8000774:	81fb      	strh	r3, [r7, #14]
 8000776:	89fa      	ldrh	r2, [r7, #14]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	3b01      	subs	r3, #1
 800077c:	429a      	cmp	r2, r3
 800077e:	d3c3      	bcc.n	8000708 <triArbre+0x10>
	  }
	}
  }
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <creerRacine>:

struct noeud* creerRacine(struct noeud* arbre[256], uint32_t taille) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	82fb      	strh	r3, [r7, #22]
	struct noeud* adresseNoeudPrecedent = arbre[0];
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	613b      	str	r3, [r7, #16]
	struct noeud* adresseNoeud = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]

	afficherTabArbreHuffman(arbre, taille);
 80007a4:	6839      	ldr	r1, [r7, #0]
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ff58 	bl	800065c <afficherTabArbreHuffman>

	do {
		adresseNoeud = (struct noeud*) malloc(sizeof(struct noeud));
 80007ac:	2018      	movs	r0, #24
 80007ae:	f002 fb2f 	bl	8002e10 <malloc>
 80007b2:	4603      	mov	r3, r0
 80007b4:	60fb      	str	r3, [r7, #12]
		adresseNoeud->c = 0;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
		adresseNoeud->occurence = arbre[0]->occurence + arbre[1]->occurence;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3304      	adds	r3, #4
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	441a      	add	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	605a      	str	r2, [r3, #4]
		adresseNoeud->gauche = arbre[0];
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	611a      	str	r2, [r3, #16]
		adresseNoeud->droite = arbre[1];
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	615a      	str	r2, [r3, #20]

		arbre[1] = adresseNoeud;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3304      	adds	r3, #4
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	601a      	str	r2, [r3, #0]

		taille = shiftArbre(arbre, taille);
 80007e8:	6839      	ldr	r1, [r7, #0]
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 f9f0 	bl	8000bd0 <shiftArbre>
 80007f0:	4603      	mov	r3, r0
 80007f2:	603b      	str	r3, [r7, #0]

		triArbre(arbre, taille);
 80007f4:	6839      	ldr	r1, [r7, #0]
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ff7e 	bl	80006f8 <triArbre>

		afficherTabArbreHuffman(arbre, taille);
 80007fc:	6839      	ldr	r1, [r7, #0]
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ff2c 	bl	800065c <afficherTabArbreHuffman>


	} while (taille > 1);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d8d0      	bhi.n	80007ac <creerRacine+0x20>
		adresseNoeud->gauche = adresseNoeudPrecedent;
		adresseNoeud->droite = arbre[i];
		adresseNoeudPrecedent = adresseNoeud;
	}*/

	return(adresseNoeud); //retourne l'adresse de la racine
 800080a:	68fb      	ldr	r3, [r7, #12]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <parcourirArbre>:

void parcourirArbre(struct noeud* ptrNoeud) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	if(ptrNoeud->gauche == NULL && ptrNoeud->droite == NULL) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d10d      	bne.n	8000840 <parcourirArbre+0x2c>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d109      	bne.n	8000840 <parcourirArbre+0x2c>
		printf("\n%c -> %u", ptrNoeud->c, ptrNoeud->occurence);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	461a      	mov	r2, r3
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <parcourirArbre+0x58>)
 800083a:	f002 fba1 	bl	8002f80 <iprintf>

		if(ptrNoeud->droite) {
			parcourirArbre(ptrNoeud->droite);
		}
	}
}
 800083e:	e011      	b.n	8000864 <parcourirArbre+0x50>
		if(ptrNoeud->gauche) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d004      	beq.n	8000852 <parcourirArbre+0x3e>
			parcourirArbre(ptrNoeud->gauche);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ffe1 	bl	8000814 <parcourirArbre>
		if(ptrNoeud->droite) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <parcourirArbre+0x50>
			parcourirArbre(ptrNoeud->droite);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ffd8 	bl	8000814 <parcourirArbre>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	08003f40 	.word	0x08003f40

08000870 <creerCode>:

void creerCode(struct noeud* ptrNoeud, uint32_t code, uint32_t taille) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
	if(ptrNoeud->gauche == NULL && ptrNoeud->droite == NULL) {
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d114      	bne.n	80008ae <creerCode+0x3e>
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d110      	bne.n	80008ae <creerCode+0x3e>
		ptrNoeud->tailleCode = taille;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	60da      	str	r2, [r3, #12]
		ptrNoeud->code = code;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	609a      	str	r2, [r3, #8]
		printf("%c \t code : %d \t taille : %d\n", ptrNoeud->c, ptrNoeud->code, ptrNoeud->tailleCode);
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	689a      	ldr	r2, [r3, #8]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	4811      	ldr	r0, [pc, #68]	; (80008ec <creerCode+0x7c>)
 80008a8:	f002 fb6a 	bl	8002f80 <iprintf>

		if(ptrNoeud->droite) {
			creerCode(ptrNoeud->droite, code<<1, taille+1);
		}
	}
}
 80008ac:	e01a      	b.n	80008e4 <creerCode+0x74>
		if(ptrNoeud->gauche) {
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d009      	beq.n	80008ca <creerCode+0x5a>
			creerCode(ptrNoeud->gauche, (code<<1)+1, taille+1);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	6918      	ldr	r0, [r3, #16]
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	1c59      	adds	r1, r3, #1
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	461a      	mov	r2, r3
 80008c6:	f7ff ffd3 	bl	8000870 <creerCode>
		if(ptrNoeud->droite) {
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d008      	beq.n	80008e4 <creerCode+0x74>
			creerCode(ptrNoeud->droite, code<<1, taille+1);
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6958      	ldr	r0, [r3, #20]
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	0059      	lsls	r1, r3, #1
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3301      	adds	r3, #1
 80008de:	461a      	mov	r2, r3
 80008e0:	f7ff ffc6 	bl	8000870 <creerCode>
}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	08003f4c 	.word	0x08003f4c

080008f0 <getAdress>:

struct noeud* getAdress(struct noeud* ptrNoeud, uint8_t caractere) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
	struct noeud* adresseNoeud = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]

	if(ptrNoeud->gauche == NULL && ptrNoeud->droite == NULL) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	691b      	ldr	r3, [r3, #16]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d10c      	bne.n	8000922 <getAdress+0x32>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d108      	bne.n	8000922 <getAdress+0x32>
		if(ptrNoeud->c == caractere) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	78fa      	ldrb	r2, [r7, #3]
 8000916:	429a      	cmp	r2, r3
 8000918:	d101      	bne.n	800091e <getAdress+0x2e>
			return ptrNoeud;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	e023      	b.n	8000966 <getAdress+0x76>
		} else {
			return NULL;
 800091e:	2300      	movs	r3, #0
 8000920:	e021      	b.n	8000966 <getAdress+0x76>
		}
	} else {
		if(ptrNoeud->gauche) {
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	691b      	ldr	r3, [r3, #16]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d00c      	beq.n	8000944 <getAdress+0x54>
			adresseNoeud = getAdress(ptrNoeud->gauche, caractere);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	78fa      	ldrb	r2, [r7, #3]
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ffdc 	bl	80008f0 <getAdress>
 8000938:	60f8      	str	r0, [r7, #12]
			if(adresseNoeud) {
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <getAdress+0x54>
				return(adresseNoeud);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	e010      	b.n	8000966 <getAdress+0x76>
			}
		}

		if(ptrNoeud->droite) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d00c      	beq.n	8000966 <getAdress+0x76>
			adresseNoeud = getAdress(ptrNoeud->droite, caractere);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	78fa      	ldrb	r2, [r7, #3]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ffcb 	bl	80008f0 <getAdress>
 800095a:	60f8      	str	r0, [r7, #12]
			if(adresseNoeud) {
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <getAdress+0x76>
				return(adresseNoeud);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	e7ff      	b.n	8000966 <getAdress+0x76>
			}
		}
	}
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <textCompressor>:

uint16_t textCompressor(struct noeud* ptrNoeud, uint8_t texte[256], uint8_t compressedText[256]) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]

	uint16_t caseTableauCompress = 0, tailleCompresse = 0, i = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000980:	2300      	movs	r3, #0
 8000982:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000984:	2300      	movs	r3, #0
 8000986:	847b      	strh	r3, [r7, #34]	; 0x22
	int8_t numeroBitDansCaseTableauCompress = 7;
 8000988:	2307      	movs	r3, #7
 800098a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	struct noeud* adresseCaractere = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
	while(texte[i] != 0) {
 8000992:	e06e      	b.n	8000a72 <textCompressor+0x102>
		adresseCaractere = getAdress(ptrNoeud, texte[i]);
 8000994:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	4413      	add	r3, r2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff ffa6 	bl	80008f0 <getAdress>
 80009a4:	61b8      	str	r0, [r7, #24]
		tailleCompresse += adresseCaractere->tailleCode;
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80009ae:	4413      	add	r3, r2
 80009b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		printf("%c", texte[i]);
 80009b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80009b4:	68ba      	ldr	r2, [r7, #8]
 80009b6:	4413      	add	r3, r2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 faf8 	bl	8002fb0 <putchar>

		for(int16_t j = (adresseCaractere->tailleCode)-1; j >= 0; j--) {
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	3b01      	subs	r3, #1
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	83fb      	strh	r3, [r7, #30]
 80009cc:	e04a      	b.n	8000a64 <textCompressor+0xf4>
			uint8_t codeDecale = (adresseCaractere->code >> j) & 1; //codeDecale vaut 0 ou 1
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009d6:	fa22 f303 	lsr.w	r3, r2, r3
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	75fb      	strb	r3, [r7, #23]

			//printf("\n%c : code %d >> %d\n\n", adresseCaractere->c, adresseCaractere->code, j);

			// insertion de 0 ou de 1 a la suite du texte compresse
			if(codeDecale) {
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d012      	beq.n	8000a0e <textCompressor+0x9e>
				compressedText[caseTableauCompress] |= 1 << numeroBitDansCaseTableauCompress;
 80009e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b25a      	sxtb	r2, r3
 80009f2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	b259      	sxtb	r1, r3
 8000a02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	4413      	add	r3, r2
 8000a08:	b2ca      	uxtb	r2, r1
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	e013      	b.n	8000a36 <textCompressor+0xc6>
			} else {
				compressedText[caseTableauCompress] &= ~(1 << numeroBitDansCaseTableauCompress);
 8000a0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b25a      	sxtb	r2, r3
 8000a18:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	b25b      	sxtb	r3, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	4013      	ands	r3, r2
 8000a2a:	b259      	sxtb	r1, r3
 8000a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	b2ca      	uxtb	r2, r1
 8000a34:	701a      	strb	r2, [r3, #0]
			}

			numeroBitDansCaseTableauCompress--;
 8000a36:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

			if(numeroBitDansCaseTableauCompress < 0) {
 8000a44:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	da05      	bge.n	8000a58 <textCompressor+0xe8>
				numeroBitDansCaseTableauCompress = 7;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				caseTableauCompress++;
 8000a52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a54:	3301      	adds	r3, #1
 8000a56:	84fb      	strh	r3, [r7, #38]	; 0x26
		for(int16_t j = (adresseCaractere->tailleCode)-1; j >= 0; j--) {
 8000a58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	83fb      	strh	r3, [r7, #30]
 8000a64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	dab0      	bge.n	80009ce <textCompressor+0x5e>
			}
		}
		i++;
 8000a6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000a6e:	3301      	adds	r3, #1
 8000a70:	847b      	strh	r3, [r7, #34]	; 0x22
	while(texte[i] != 0) {
 8000a72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d18a      	bne.n	8000994 <textCompressor+0x24>
	}
	printf("\nContenu compresse : %d, %d, %d\n", compressedText[0], compressedText[1], compressedText[2]);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4619      	mov	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3301      	adds	r3, #1
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3302      	adds	r3, #2
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <textCompressor+0x134>)
 8000a94:	f002 fa74 	bl	8002f80 <iprintf>

	return tailleCompresse;
 8000a98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	08003f6c 	.word	0x08003f6c

08000aa8 <generateurEntete>:

void generateurEntete(uint8_t tabEntete[256], struct noeud* racine, uint16_t tailleFichierCompresse, uint8_t nbrCaractereTotal, uint32_t tabOccurence[256]){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	4613      	mov	r3, r2
 8000abc:	717b      	strb	r3, [r7, #5]

	//Taille du fichier compresse en bits
	tabEntete[2] = tailleFichierCompresse >> 7 & 0xFF;
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	09db      	lsrs	r3, r3, #7
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	701a      	strb	r2, [r3, #0]
	tabEntete[3] = tailleFichierCompresse & 0xFF;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3303      	adds	r3, #3
 8000ad0:	88fa      	ldrh	r2, [r7, #6]
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	701a      	strb	r2, [r3, #0]

	//Nombre total de caracteres du fichier d origine
	tabEntete[4] = nbrCaractereTotal >> 7 & 0xFF;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	797a      	ldrb	r2, [r7, #5]
 8000adc:	09d2      	lsrs	r2, r2, #7
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	701a      	strb	r2, [r3, #0]
	tabEntete[5] = nbrCaractereTotal & 0xFF;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3305      	adds	r3, #5
 8000ae6:	797a      	ldrb	r2, [r7, #5]
 8000ae8:	701a      	strb	r2, [r3, #0]

	uint8_t cptCaractere = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	77fb      	strb	r3, [r7, #31]
	//Pour chaque caractere
	for(uint8_t i = 0; i < 255; i++) {
 8000aee:	2300      	movs	r3, #0
 8000af0:	77bb      	strb	r3, [r7, #30]
 8000af2:	e03b      	b.n	8000b6c <generateurEntete+0xc4>
		if(tabOccurence[i] > 0) {
 8000af4:	7fbb      	ldrb	r3, [r7, #30]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000afa:	4413      	add	r3, r2
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d031      	beq.n	8000b66 <generateurEntete+0xbe>
			struct noeud* feuilleCaractere = getAdress(racine, i);
 8000b02:	7fbb      	ldrb	r3, [r7, #30]
 8000b04:	4619      	mov	r1, r3
 8000b06:	68b8      	ldr	r0, [r7, #8]
 8000b08:	f7ff fef2 	bl	80008f0 <getAdress>
 8000b0c:	6178      	str	r0, [r7, #20]
			printf("\nCaractere : %c", feuilleCaractere->c);
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	4619      	mov	r1, r3
 8000b14:	482c      	ldr	r0, [pc, #176]	; (8000bc8 <generateurEntete+0x120>)
 8000b16:	f002 fa33 	bl	8002f80 <iprintf>
			tabEntete[6+(cptCaractere*3)] = feuilleCaractere->c;
 8000b1a:	7ffa      	ldrb	r2, [r7, #31]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	3306      	adds	r3, #6
 8000b24:	461a      	mov	r2, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4413      	add	r3, r2
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	7812      	ldrb	r2, [r2, #0]
 8000b2e:	701a      	strb	r2, [r3, #0]
		    tabEntete[7+(cptCaractere*3)] = feuilleCaractere->code;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	6899      	ldr	r1, [r3, #8]
 8000b34:	7ffa      	ldrb	r2, [r7, #31]
 8000b36:	4613      	mov	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	3307      	adds	r3, #7
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	b2ca      	uxtb	r2, r1
 8000b46:	701a      	strb	r2, [r3, #0]
			tabEntete[8+(cptCaractere*3)] = feuilleCaractere->tailleCode;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	68d9      	ldr	r1, [r3, #12]
 8000b4c:	7ffa      	ldrb	r2, [r7, #31]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	3308      	adds	r3, #8
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	b2ca      	uxtb	r2, r1
 8000b5e:	701a      	strb	r2, [r3, #0]
			cptCaractere++;
 8000b60:	7ffb      	ldrb	r3, [r7, #31]
 8000b62:	3301      	adds	r3, #1
 8000b64:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = 0; i < 255; i++) {
 8000b66:	7fbb      	ldrb	r3, [r7, #30]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	77bb      	strb	r3, [r7, #30]
 8000b6c:	7fbb      	ldrb	r3, [r7, #30]
 8000b6e:	2bff      	cmp	r3, #255	; 0xff
 8000b70:	d1c0      	bne.n	8000af4 <generateurEntete+0x4c>
		}
	}

	//Taille de l entete en octets
	uint16_t taille = 6 + (cptCaractere * 3);
 8000b72:	7ffb      	ldrb	r3, [r7, #31]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	0052      	lsls	r2, r2, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	3306      	adds	r3, #6
 8000b80:	837b      	strh	r3, [r7, #26]
	tabEntete[0] =  taille >> 7 & 0xFF;
 8000b82:	8b7b      	ldrh	r3, [r7, #26]
 8000b84:	09db      	lsrs	r3, r3, #7
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	701a      	strb	r2, [r3, #0]
	tabEntete[1] = taille & 0xFF;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3301      	adds	r3, #1
 8000b92:	8b7a      	ldrh	r2, [r7, #26]
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	701a      	strb	r2, [r3, #0]

	for(uint16_t i = 0; i<taille; i++) {
 8000b98:	2300      	movs	r3, #0
 8000b9a:	83bb      	strh	r3, [r7, #28]
 8000b9c:	e00b      	b.n	8000bb6 <generateurEntete+0x10e>
		printf("\ntabEntete[%d] = %d", i, tabEntete[i]);
 8000b9e:	8bb9      	ldrh	r1, [r7, #28]
 8000ba0:	8bbb      	ldrh	r3, [r7, #28]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4808      	ldr	r0, [pc, #32]	; (8000bcc <generateurEntete+0x124>)
 8000bac:	f002 f9e8 	bl	8002f80 <iprintf>
	for(uint16_t i = 0; i<taille; i++) {
 8000bb0:	8bbb      	ldrh	r3, [r7, #28]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	83bb      	strh	r3, [r7, #28]
 8000bb6:	8bba      	ldrh	r2, [r7, #28]
 8000bb8:	8b7b      	ldrh	r3, [r7, #26]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d3ef      	bcc.n	8000b9e <generateurEntete+0xf6>
	}

}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	08003f90 	.word	0x08003f90
 8000bcc:	08003fa0 	.word	0x08003fa0

08000bd0 <shiftArbre>:

/************************
 * Fonctions privees	*
 ************************/

static uint16_t shiftArbre(struct noeud* arbre[256], uint32_t taille) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	81fb      	strh	r3, [r7, #14]
	for(i = 0; i<taille-1; i++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	81fb      	strh	r3, [r7, #14]
 8000be2:	e00d      	b.n	8000c00 <shiftArbre+0x30>
		arbre[i] = arbre[i+1];
 8000be4:	89fb      	ldrh	r3, [r7, #14]
 8000be6:	3301      	adds	r3, #1
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	441a      	add	r2, r3
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	440b      	add	r3, r1
 8000bf6:	6812      	ldr	r2, [r2, #0]
 8000bf8:	601a      	str	r2, [r3, #0]
	for(i = 0; i<taille-1; i++) {
 8000bfa:	89fb      	ldrh	r3, [r7, #14]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	81fb      	strh	r3, [r7, #14]
 8000c00:	89fa      	ldrh	r2, [r7, #14]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d3ec      	bcc.n	8000be4 <shiftArbre+0x14>
	}
	arbre[i]=0;
 8000c0a:	89fb      	ldrh	r3, [r7, #14]
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]

	return (taille-1);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	b29b      	uxth	r3, r3
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 8000c34:	1d39      	adds	r1, r7, #4
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <__io_putchar+0x20>)
 8000c3e:	f001 fc5e 	bl	80024fe <HAL_UART_Transmit>
}
 8000c42:	bf00      	nop
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000098 	.word	0x20000098

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	f6ad 2d28 	subw	sp, sp, #2600	; 0xa28
 8000c56:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  struct noeud* arbreHuffman[256];
  struct noeud* racine;
  uint8_t 	texte[]="aaaabbbccd";
 8000c58:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8000c5c:	4a5c      	ldr	r2, [pc, #368]	; (8000dd0 <main+0x180>)
 8000c5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c60:	c303      	stmia	r3!, {r0, r1}
 8000c62:	801a      	strh	r2, [r3, #0]
 8000c64:	3302      	adds	r3, #2
 8000c66:	0c12      	lsrs	r2, r2, #16
 8000c68:	701a      	strb	r2, [r3, #0]
  uint8_t 	texteCompress[TAILLE_MAX_COMPRESS] = {0};
 8000c6a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c74:	461a      	mov	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f002 f8d2 	bl	8002e20 <memset>
  uint32_t 	tabCaractere[256] = {0};
 8000c7c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c80:	4618      	mov	r0, r3
 8000c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c86:	461a      	mov	r2, r3
 8000c88:	2100      	movs	r1, #0
 8000c8a:	f002 f8c9 	bl	8002e20 <memset>
  uint32_t	nbrCaractereTotal = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
  uint32_t	nbrCaractereDifferent = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

  uint8_t tabEntete[256] = {0};
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f002 f8bb 	bl	8002e20 <memset>

  uint16_t tailleTableauHuffman = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8a7 3a16 	strh.w	r3, [r7, #2582]	; 0xa16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb0:	f000 fb9e 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb4:	f000 f89c 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb8:	f000 f932 	bl	8000f20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cbc:	f000 f906 	bl	8000ecc <MX_USART2_UART_Init>

	  /*****************************************************************************************
	   * 									Partie 2 TP										   *
	   *****************************************************************************************/

	  occurence(texte, tabCaractere);
 8000cc0:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000cc4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f99f 	bl	800100e <occurence>
	  occurencePrint(texte, tabCaractere);
 8000cd0:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000cd4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f9b2 	bl	8001044 <occurencePrint>

	  tailleTableauHuffman = creerFeuille(arbreHuffman, tabCaractere);
 8000ce0:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000ce4:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fc68 	bl	80005c0 <creerFeuille>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f8a7 3a16 	strh.w	r3, [r7, #2582]	; 0xa16
	  triArbre(arbreHuffman, tailleTableauHuffman);
 8000cf6:	f8b7 2a16 	ldrh.w	r2, [r7, #2582]	; 0xa16
 8000cfa:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fcf9 	bl	80006f8 <triArbre>
	  afficherTabArbreHuffman (arbreHuffman, tailleTableauHuffman);
 8000d06:	f8b7 2a16 	ldrh.w	r2, [r7, #2582]	; 0xa16
 8000d0a:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fca3 	bl	800065c <afficherTabArbreHuffman>

	  printf("\nCreation racine\n");
 8000d16:	482f      	ldr	r0, [pc, #188]	; (8000dd4 <main+0x184>)
 8000d18:	f002 f9ba 	bl	8003090 <puts>

	  racine = creerRacine(arbreHuffman, tailleTableauHuffman);
 8000d1c:	f8b7 2a16 	ldrh.w	r2, [r7, #2582]	; 0xa16
 8000d20:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fd30 	bl	800078c <creerRacine>
 8000d2c:	f8c7 0a10 	str.w	r0, [r7, #2576]	; 0xa10

	  printf("\nParcours arbre : Affichage caractere et occurence\n");
 8000d30:	4829      	ldr	r0, [pc, #164]	; (8000dd8 <main+0x188>)
 8000d32:	f002 f9ad 	bl	8003090 <puts>
	  parcourirArbre(racine);
 8000d36:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8000d3a:	f7ff fd6b 	bl	8000814 <parcourirArbre>
	  //free(arbreHuffman); // a corriger 2.3.6

	  printf("\n");
 8000d3e:	200a      	movs	r0, #10
 8000d40:	f002 f936 	bl	8002fb0 <putchar>
	  creerCode(racine, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8000d4c:	f7ff fd90 	bl	8000870 <creerCode>

	  nbrCaractereTotal = strlen((unsigned char*) texte);
 8000d50:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fa5b 	bl	8000210 <strlen>
 8000d5a:	f8c7 0a1c 	str.w	r0, [r7, #2588]	; 0xa1c
	  printf("\nnbrCaractereTotal = %d\n", nbrCaractereTotal);
 8000d5e:	f8d7 1a1c 	ldr.w	r1, [r7, #2588]	; 0xa1c
 8000d62:	481e      	ldr	r0, [pc, #120]	; (8000ddc <main+0x18c>)
 8000d64:	f002 f90c 	bl	8002f80 <iprintf>

	  nbrCaractereDifferent = obtenirNbCarDifferent(tabCaractere);
 8000d68:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f99d 	bl	80010ac <obtenirNbCarDifferent>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
	  printf("\nnbrCaractereDifferent = %d\n", nbrCaractereDifferent);
 8000d78:	f8d7 1a18 	ldr.w	r1, [r7, #2584]	; 0xa18
 8000d7c:	4818      	ldr	r0, [pc, #96]	; (8000de0 <main+0x190>)
 8000d7e:	f002 f8ff 	bl	8002f80 <iprintf>

	  uint16_t tailleTexteCompresse = textCompressor(racine, texte, texteCompress);
 8000d82:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8000d86:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8000d90:	f7ff fdee 	bl	8000970 <textCompressor>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f8a7 3a0e 	strh.w	r3, [r7, #2574]	; 0xa0e
	  printf("\nTaille texte compresse = %d", tailleTexteCompresse);
 8000d9a:	f8b7 3a0e 	ldrh.w	r3, [r7, #2574]	; 0xa0e
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4810      	ldr	r0, [pc, #64]	; (8000de4 <main+0x194>)
 8000da2:	f002 f8ed 	bl	8002f80 <iprintf>

	  generateurEntete(tabEntete, racine, tailleTexteCompresse, nbrCaractereTotal, tabCaractere);
 8000da6:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 8000daa:	b2d9      	uxtb	r1, r3
 8000dac:	f8b7 2a0e 	ldrh.w	r2, [r7, #2574]	; 0xa0e
 8000db0:	4638      	mov	r0, r7
 8000db2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	460b      	mov	r3, r1
 8000dba:	f8d7 1a10 	ldr.w	r1, [r7, #2576]	; 0xa10
 8000dbe:	f7ff fe73 	bl	8000aa8 <generateurEntete>



	  printf("\n\nDELAY");
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <main+0x198>)
 8000dc4:	f002 f8dc 	bl	8002f80 <iprintf>
	  HAL_Delay(5000000);
 8000dc8:	4808      	ldr	r0, [pc, #32]	; (8000dec <main+0x19c>)
 8000dca:	f000 fb83 	bl	80014d4 <HAL_Delay>
  {
 8000dce:	e777      	b.n	8000cc0 <main+0x70>
 8000dd0:	08004060 	.word	0x08004060
 8000dd4:	08003fb4 	.word	0x08003fb4
 8000dd8:	08003fc8 	.word	0x08003fc8
 8000ddc:	08003ffc 	.word	0x08003ffc
 8000de0:	08004018 	.word	0x08004018
 8000de4:	08004038 	.word	0x08004038
 8000de8:	08004058 	.word	0x08004058
 8000dec:	004c4b40 	.word	0x004c4b40

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	; 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	2234      	movs	r2, #52	; 0x34
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 f80e 	bl	8002e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <SystemClock_Config+0xd4>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	4a29      	ldr	r2, [pc, #164]	; (8000ec4 <SystemClock_Config+0xd4>)
 8000e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e22:	6413      	str	r3, [r2, #64]	; 0x40
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <SystemClock_Config+0xd4>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e30:	2300      	movs	r3, #0
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <SystemClock_Config+0xd8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e3c:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <SystemClock_Config+0xd8>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <SystemClock_Config+0xd8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e54:	2301      	movs	r3, #1
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e58:	2310      	movs	r3, #16
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e64:	2310      	movs	r3, #16
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e76:	2302      	movs	r3, #2
 8000e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 f896 	bl	8001fb0 <HAL_RCC_OscConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e8a:	f000 f8b9 	bl	8001000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8e:	230f      	movs	r3, #15
 8000e90:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e92:	2302      	movs	r3, #2
 8000e94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fdc6 	bl	8001a3c <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000eb6:	f000 f8a3 	bl	8001000 <Error_Handler>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3750      	adds	r7, #80	; 0x50
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <MX_USART2_UART_Init+0x50>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000f04:	f001 faae 	bl	8002464 <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f0e:	f000 f877 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000098 	.word	0x20000098
 8000f1c:	40004400 	.word	0x40004400

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <MX_GPIO_Init+0xd0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a2c      	ldr	r2, [pc, #176]	; (8000ff0 <MX_GPIO_Init+0xd0>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <MX_GPIO_Init+0xd0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <MX_GPIO_Init+0xd0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <MX_GPIO_Init+0xd0>)
 8000f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <MX_GPIO_Init+0xd0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <MX_GPIO_Init+0xd0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <MX_GPIO_Init+0xd0>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <MX_GPIO_Init+0xd0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <MX_GPIO_Init+0xd0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <MX_GPIO_Init+0xd0>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <MX_GPIO_Init+0xd0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2120      	movs	r1, #32
 8000faa:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <MX_GPIO_Init+0xd4>)
 8000fac:	f000 fd2c 	bl	8001a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <MX_GPIO_Init+0xd8>)
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <MX_GPIO_Init+0xdc>)
 8000fc6:	f000 fb8d 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fca:	2320      	movs	r3, #32
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_GPIO_Init+0xd4>)
 8000fe2:	f000 fb7f 	bl	80016e4 <HAL_GPIO_Init>

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	10210000 	.word	0x10210000
 8000ffc:	40020800 	.word	0x40020800

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <occurence>:
 */


#include "occurence.h"

void occurence(uint8_t* chaine, uint32_t tab[256]) {
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
  //Obtention des occurences de chaque caractere
  while(*chaine != '\0') {
 8001018:	e00a      	b.n	8001030 <occurence+0x22>
	  tab[*chaine]++;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	4413      	add	r3, r2
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	3201      	adds	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
	  chaine++;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3301      	adds	r3, #1
 800102e:	607b      	str	r3, [r7, #4]
  while(*chaine != '\0') {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f0      	bne.n	800101a <occurence+0xc>
  }

}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <occurencePrint>:

void occurencePrint(uint8_t* chaine, uint32_t tab[256]) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	  //Affiche chaque caractere ainsi que son occurence sous forme de tableau
	  printf("\n\n");
 800104e:	4813      	ldr	r0, [pc, #76]	; (800109c <occurencePrint+0x58>)
 8001050:	f002 f81e 	bl	8003090 <puts>
	  printf("+-------+-------+\n");
 8001054:	4812      	ldr	r0, [pc, #72]	; (80010a0 <occurencePrint+0x5c>)
 8001056:	f002 f81b 	bl	8003090 <puts>
	  printf("| Car \t* Occ\t|\n");
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <occurencePrint+0x60>)
 800105c:	f002 f818 	bl	8003090 <puts>
	  printf("+-------+-------+\n");
 8001060:	480f      	ldr	r0, [pc, #60]	; (80010a0 <occurencePrint+0x5c>)
 8001062:	f002 f815 	bl	8003090 <puts>
	  for(int i = 0; i<256; i++) {
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e00f      	b.n	800108c <occurencePrint+0x48>
		  printf("| %c \t| %d \t|\n", i, tab[i]);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	4413      	add	r3, r2
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	68f9      	ldr	r1, [r7, #12]
 800107a:	480b      	ldr	r0, [pc, #44]	; (80010a8 <occurencePrint+0x64>)
 800107c:	f001 ff80 	bl	8002f80 <iprintf>
		  printf("+-------+-------+\n");
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <occurencePrint+0x5c>)
 8001082:	f002 f805 	bl	8003090 <puts>
	  for(int i = 0; i<256; i++) {
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3301      	adds	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2bff      	cmp	r3, #255	; 0xff
 8001090:	ddec      	ble.n	800106c <occurencePrint+0x28>
	  }

}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	08004248 	.word	0x08004248
 80010a0:	0800424c 	.word	0x0800424c
 80010a4:	08004260 	.word	0x08004260
 80010a8:	08004270 	.word	0x08004270

080010ac <obtenirNbCarDifferent>:

uint16_t obtenirNbCarDifferent(uint32_t tab[256]) {
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	uint16_t nbCarDifferent = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < 255; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	737b      	strb	r3, [r7, #13]
 80010bc:	e00c      	b.n	80010d8 <obtenirNbCarDifferent+0x2c>
		if(tab[i] > 0) {
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <obtenirNbCarDifferent+0x26>
			nbCarDifferent++;
 80010cc:	89fb      	ldrh	r3, [r7, #14]
 80010ce:	3301      	adds	r3, #1
 80010d0:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < 255; i++) {
 80010d2:	7b7b      	ldrb	r3, [r7, #13]
 80010d4:	3301      	adds	r3, #1
 80010d6:	737b      	strb	r3, [r7, #13]
 80010d8:	7b7b      	ldrb	r3, [r7, #13]
 80010da:	2bff      	cmp	r3, #255	; 0xff
 80010dc:	d1ef      	bne.n	80010be <obtenirNbCarDifferent+0x12>
		}
	}
	return nbCarDifferent;
 80010de:	89fb      	ldrh	r3, [r7, #14]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_MspInit+0x4c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <HAL_MspInit+0x4c>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_MspInit+0x4c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_MspInit+0x4c>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800112a:	2007      	movs	r0, #7
 800112c:	f000 faa6 	bl	800167c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_UART_MspInit+0x84>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d12b      	bne.n	80011b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_UART_MspInit+0x88>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <HAL_UART_MspInit+0x88>)
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_UART_MspInit+0x88>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_UART_MspInit+0x88>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <HAL_UART_MspInit+0x88>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_UART_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001196:	230c      	movs	r3, #12
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a6:	2307      	movs	r3, #7
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <HAL_UART_MspInit+0x8c>)
 80011b2:	f000 fa97 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40004400 	.word	0x40004400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 f938 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	e00a      	b.n	8001250 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800123a:	f3af 8000 	nop.w
 800123e:	4601      	mov	r1, r0
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	60ba      	str	r2, [r7, #8]
 8001246:	b2ca      	uxtb	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	429a      	cmp	r2, r3
 8001256:	dbf0      	blt.n	800123a <_read+0x12>
	}

return len;
 8001258:	687b      	ldr	r3, [r7, #4]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e009      	b.n	8001288 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	60ba      	str	r2, [r7, #8]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fcd5 	bl	8000c2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf1      	blt.n	8001274 <_write+0x12>
	}
	return len;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_close>:

int _close(int file)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
	return -1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c2:	605a      	str	r2, [r3, #4]
	return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_isatty>:

int _isatty(int file)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	return 1;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001334:	f001 fd42 	bl	8002dbc <__errno>
 8001338:	4602      	mov	r2, r0
 800133a:	230c      	movs	r3, #12
 800133c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20020000 	.word	0x20020000
 8001364:	00000400 	.word	0x00000400
 8001368:	2000008c 	.word	0x2000008c
 800136c:	200000e0 	.word	0x200000e0

08001370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <SystemInit+0x28>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a07      	ldr	r2, [pc, #28]	; (8001398 <SystemInit+0x28>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SystemInit+0x28>)
 8001386:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800138a:	609a      	str	r2, [r3, #8]
#endif
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013a2:	e003      	b.n	80013ac <LoopCopyDataInit>

080013a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013aa:	3104      	adds	r1, #4

080013ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013b4:	d3f6      	bcc.n	80013a4 <CopyDataInit>
  ldr  r2, =_sbss
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013b8:	e002      	b.n	80013c0 <LoopFillZerobss>

080013ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013bc:	f842 3b04 	str.w	r3, [r2], #4

080013c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013c4:	d3f9      	bcc.n	80013ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013c6:	f7ff ffd3 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f001 fcfd 	bl	8002dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7ff fc3f 	bl	8000c50 <main>
  bx  lr    
 80013d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013d8:	08004340 	.word	0x08004340
  ldr  r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013e0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80013e4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80013e8:	200000e0 	.word	0x200000e0

080013ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_Init+0x40>)
 80013fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_Init+0x40>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_Init+0x40>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f92f 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f808 	bl	8001434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f7ff fe62 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023c00 	.word	0x40023c00

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x54>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x58>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f939 	bl	80016ca <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f90f 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <HAL_InitTick+0x5c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000000 	.word	0x20000000
 800148c:	20000008 	.word	0x20000008
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008
 80014b8:	200000d8 	.word	0x200000d8

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200000d8 	.word	0x200000d8

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_Delay+0x40>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000008 	.word	0x20000008

08001518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <__NVIC_GetPriorityGrouping+0x18>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 0307 	and.w	r3, r3, #7
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff8e 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff47 	bl	8001518 <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff5c 	bl	8001560 <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff8e 	bl	80015d0 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5d 	bl	800157c <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffb0 	bl	8001638 <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e165      	b.n	80019cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 8154 	bne.w	80019c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d00b      	beq.n	800173e <HAL_GPIO_Init+0x5a>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d007      	beq.n	800173e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001732:	2b11      	cmp	r3, #17
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b12      	cmp	r3, #18
 800173c:	d130      	bne.n	80017a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001774:	2201      	movs	r2, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 0201 	and.w	r2, r3, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0xfc>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b12      	cmp	r3, #18
 80017de:	d123      	bne.n	8001828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	08da      	lsrs	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3208      	adds	r2, #8
 80017e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	69b9      	ldr	r1, [r7, #24]
 8001824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80ae 	beq.w	80019c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <HAL_GPIO_Init+0x2fc>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a5b      	ldr	r2, [pc, #364]	; (80019e0 <HAL_GPIO_Init+0x2fc>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_GPIO_Init+0x2fc>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001886:	4a57      	ldr	r2, [pc, #348]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4e      	ldr	r2, [pc, #312]	; (80019e8 <HAL_GPIO_Init+0x304>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d025      	beq.n	80018fe <HAL_GPIO_Init+0x21a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4d      	ldr	r2, [pc, #308]	; (80019ec <HAL_GPIO_Init+0x308>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d01f      	beq.n	80018fa <HAL_GPIO_Init+0x216>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4c      	ldr	r2, [pc, #304]	; (80019f0 <HAL_GPIO_Init+0x30c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d019      	beq.n	80018f6 <HAL_GPIO_Init+0x212>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4b      	ldr	r2, [pc, #300]	; (80019f4 <HAL_GPIO_Init+0x310>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0x20e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4a      	ldr	r2, [pc, #296]	; (80019f8 <HAL_GPIO_Init+0x314>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00d      	beq.n	80018ee <HAL_GPIO_Init+0x20a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a49      	ldr	r2, [pc, #292]	; (80019fc <HAL_GPIO_Init+0x318>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x206>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a48      	ldr	r2, [pc, #288]	; (8001a00 <HAL_GPIO_Init+0x31c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_GPIO_Init+0x202>
 80018e2:	2306      	movs	r3, #6
 80018e4:	e00c      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018e6:	2307      	movs	r3, #7
 80018e8:	e00a      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018ea:	2305      	movs	r3, #5
 80018ec:	e008      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018ee:	2304      	movs	r3, #4
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018fe:	2300      	movs	r3, #0
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f002 0203 	and.w	r2, r2, #3
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001910:	4934      	ldr	r1, [pc, #208]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800191e:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_GPIO_Init+0x320>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001942:	4a30      	ldr	r2, [pc, #192]	; (8001a04 <HAL_GPIO_Init+0x320>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001948:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_GPIO_Init+0x320>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800196c:	4a25      	ldr	r2, [pc, #148]	; (8001a04 <HAL_GPIO_Init+0x320>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_GPIO_Init+0x320>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001996:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <HAL_GPIO_Init+0x320>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_GPIO_Init+0x320>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c0:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <HAL_GPIO_Init+0x320>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3301      	adds	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b0f      	cmp	r3, #15
 80019d0:	f67f ae96 	bls.w	8001700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d4:	bf00      	nop
 80019d6:	3724      	adds	r7, #36	; 0x24
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40013800 	.word	0x40013800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40021400 	.word	0x40021400
 8001a00:	40021800 	.word	0x40021800
 8001a04:	40013c00 	.word	0x40013c00

08001a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
 8001a14:	4613      	mov	r3, r2
 8001a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a18:	787b      	ldrb	r3, [r7, #1]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1e:	887a      	ldrh	r2, [r7, #2]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a24:	e003      	b.n	8001a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	041a      	lsls	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	619a      	str	r2, [r3, #24]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0cc      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d90c      	bls.n	8001a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b65      	ldr	r3, [pc, #404]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0b8      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	494d      	ldr	r1, [pc, #308]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d044      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d119      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e07f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e06f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e067      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f023 0203 	bic.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4934      	ldr	r1, [pc, #208]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff fcc6 	bl	80014bc <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f7ff fcc2 	bl	80014bc <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e04f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 020c 	and.w	r2, r3, #12
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1eb      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d20c      	bcs.n	8001b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e032      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4916      	ldr	r1, [pc, #88]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc2:	f000 f855 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fc26 	bl	8001434 <HAL_InitTick>

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	08004280 	.word	0x08004280
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000000 	.word	0x20000000

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c24:	f7ff fff0 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c28:	4601      	mov	r1, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0a9b      	lsrs	r3, r3, #10
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4a03      	ldr	r2, [pc, #12]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c36:	5cd3      	ldrb	r3, [r2, r3]
 8001c38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	08004290 	.word	0x08004290

08001c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c4c:	f7ff ffdc 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c50:	4601      	mov	r1, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0b5b      	lsrs	r3, r3, #13
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4a03      	ldr	r2, [pc, #12]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	08004290 	.word	0x08004290

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c8a:	4bc6      	ldr	r3, [pc, #792]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	f200 817e 	bhi.w	8001f94 <HAL_RCC_GetSysClockFreq+0x324>
 8001c98:	a201      	add	r2, pc, #4	; (adr r2, 8001ca0 <HAL_RCC_GetSysClockFreq+0x30>)
 8001c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9e:	bf00      	nop
 8001ca0:	08001cd5 	.word	0x08001cd5
 8001ca4:	08001f95 	.word	0x08001f95
 8001ca8:	08001f95 	.word	0x08001f95
 8001cac:	08001f95 	.word	0x08001f95
 8001cb0:	08001cdb 	.word	0x08001cdb
 8001cb4:	08001f95 	.word	0x08001f95
 8001cb8:	08001f95 	.word	0x08001f95
 8001cbc:	08001f95 	.word	0x08001f95
 8001cc0:	08001ce1 	.word	0x08001ce1
 8001cc4:	08001f95 	.word	0x08001f95
 8001cc8:	08001f95 	.word	0x08001f95
 8001ccc:	08001f95 	.word	0x08001f95
 8001cd0:	08001e3d 	.word	0x08001e3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cd4:	4bb4      	ldr	r3, [pc, #720]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001cd6:	613b      	str	r3, [r7, #16]
       break;
 8001cd8:	e15f      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cda:	4bb4      	ldr	r3, [pc, #720]	; (8001fac <HAL_RCC_GetSysClockFreq+0x33c>)
 8001cdc:	613b      	str	r3, [r7, #16]
      break;
 8001cde:	e15c      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce0:	4bb0      	ldr	r3, [pc, #704]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cea:	4bae      	ldr	r3, [pc, #696]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d04a      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf6:	4bab      	ldr	r3, [pc, #684]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	099b      	lsrs	r3, r3, #6
 8001cfc:	f04f 0400 	mov.w	r4, #0
 8001d00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	ea03 0501 	and.w	r5, r3, r1
 8001d0c:	ea04 0602 	and.w	r6, r4, r2
 8001d10:	4629      	mov	r1, r5
 8001d12:	4632      	mov	r2, r6
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	f04f 0400 	mov.w	r4, #0
 8001d1c:	0154      	lsls	r4, r2, #5
 8001d1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d22:	014b      	lsls	r3, r1, #5
 8001d24:	4619      	mov	r1, r3
 8001d26:	4622      	mov	r2, r4
 8001d28:	1b49      	subs	r1, r1, r5
 8001d2a:	eb62 0206 	sbc.w	r2, r2, r6
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	f04f 0400 	mov.w	r4, #0
 8001d36:	0194      	lsls	r4, r2, #6
 8001d38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d3c:	018b      	lsls	r3, r1, #6
 8001d3e:	1a5b      	subs	r3, r3, r1
 8001d40:	eb64 0402 	sbc.w	r4, r4, r2
 8001d44:	f04f 0100 	mov.w	r1, #0
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	00e2      	lsls	r2, r4, #3
 8001d4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d52:	00d9      	lsls	r1, r3, #3
 8001d54:	460b      	mov	r3, r1
 8001d56:	4614      	mov	r4, r2
 8001d58:	195b      	adds	r3, r3, r5
 8001d5a:	eb44 0406 	adc.w	r4, r4, r6
 8001d5e:	f04f 0100 	mov.w	r1, #0
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	0262      	lsls	r2, r4, #9
 8001d68:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d6c:	0259      	lsls	r1, r3, #9
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4614      	mov	r4, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	4621      	mov	r1, r4
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f04f 0400 	mov.w	r4, #0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	f7fe fa9e 	bl	80002c0 <__aeabi_uldivmod>
 8001d84:	4603      	mov	r3, r0
 8001d86:	460c      	mov	r4, r1
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e049      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8c:	4b85      	ldr	r3, [pc, #532]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	f04f 0400 	mov.w	r4, #0
 8001d96:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	ea03 0501 	and.w	r5, r3, r1
 8001da2:	ea04 0602 	and.w	r6, r4, r2
 8001da6:	4629      	mov	r1, r5
 8001da8:	4632      	mov	r2, r6
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	f04f 0400 	mov.w	r4, #0
 8001db2:	0154      	lsls	r4, r2, #5
 8001db4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001db8:	014b      	lsls	r3, r1, #5
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4622      	mov	r2, r4
 8001dbe:	1b49      	subs	r1, r1, r5
 8001dc0:	eb62 0206 	sbc.w	r2, r2, r6
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	f04f 0400 	mov.w	r4, #0
 8001dcc:	0194      	lsls	r4, r2, #6
 8001dce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dd2:	018b      	lsls	r3, r1, #6
 8001dd4:	1a5b      	subs	r3, r3, r1
 8001dd6:	eb64 0402 	sbc.w	r4, r4, r2
 8001dda:	f04f 0100 	mov.w	r1, #0
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	00e2      	lsls	r2, r4, #3
 8001de4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001de8:	00d9      	lsls	r1, r3, #3
 8001dea:	460b      	mov	r3, r1
 8001dec:	4614      	mov	r4, r2
 8001dee:	195b      	adds	r3, r3, r5
 8001df0:	eb44 0406 	adc.w	r4, r4, r6
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	02a2      	lsls	r2, r4, #10
 8001dfe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e02:	0299      	lsls	r1, r3, #10
 8001e04:	460b      	mov	r3, r1
 8001e06:	4614      	mov	r4, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f04f 0400 	mov.w	r4, #0
 8001e12:	461a      	mov	r2, r3
 8001e14:	4623      	mov	r3, r4
 8001e16:	f7fe fa53 	bl	80002c0 <__aeabi_uldivmod>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e20:	4b60      	ldr	r3, [pc, #384]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	0c1b      	lsrs	r3, r3, #16
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	613b      	str	r3, [r7, #16]
      break;
 8001e3a:	e0ae      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e44:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e46:	4b57      	ldr	r3, [pc, #348]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d04a      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e52:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	099b      	lsrs	r3, r3, #6
 8001e58:	f04f 0400 	mov.w	r4, #0
 8001e5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	ea03 0501 	and.w	r5, r3, r1
 8001e68:	ea04 0602 	and.w	r6, r4, r2
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	4632      	mov	r2, r6
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	f04f 0400 	mov.w	r4, #0
 8001e78:	0154      	lsls	r4, r2, #5
 8001e7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e7e:	014b      	lsls	r3, r1, #5
 8001e80:	4619      	mov	r1, r3
 8001e82:	4622      	mov	r2, r4
 8001e84:	1b49      	subs	r1, r1, r5
 8001e86:	eb62 0206 	sbc.w	r2, r2, r6
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	f04f 0400 	mov.w	r4, #0
 8001e92:	0194      	lsls	r4, r2, #6
 8001e94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e98:	018b      	lsls	r3, r1, #6
 8001e9a:	1a5b      	subs	r3, r3, r1
 8001e9c:	eb64 0402 	sbc.w	r4, r4, r2
 8001ea0:	f04f 0100 	mov.w	r1, #0
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	00e2      	lsls	r2, r4, #3
 8001eaa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001eae:	00d9      	lsls	r1, r3, #3
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4614      	mov	r4, r2
 8001eb4:	195b      	adds	r3, r3, r5
 8001eb6:	eb44 0406 	adc.w	r4, r4, r6
 8001eba:	f04f 0100 	mov.w	r1, #0
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	0262      	lsls	r2, r4, #9
 8001ec4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ec8:	0259      	lsls	r1, r3, #9
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4614      	mov	r4, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f04f 0400 	mov.w	r4, #0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4623      	mov	r3, r4
 8001edc:	f7fe f9f0 	bl	80002c0 <__aeabi_uldivmod>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e049      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	f04f 0400 	mov.w	r4, #0
 8001ef2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	ea03 0501 	and.w	r5, r3, r1
 8001efe:	ea04 0602 	and.w	r6, r4, r2
 8001f02:	4629      	mov	r1, r5
 8001f04:	4632      	mov	r2, r6
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	f04f 0400 	mov.w	r4, #0
 8001f0e:	0154      	lsls	r4, r2, #5
 8001f10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f14:	014b      	lsls	r3, r1, #5
 8001f16:	4619      	mov	r1, r3
 8001f18:	4622      	mov	r2, r4
 8001f1a:	1b49      	subs	r1, r1, r5
 8001f1c:	eb62 0206 	sbc.w	r2, r2, r6
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	f04f 0400 	mov.w	r4, #0
 8001f28:	0194      	lsls	r4, r2, #6
 8001f2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f2e:	018b      	lsls	r3, r1, #6
 8001f30:	1a5b      	subs	r3, r3, r1
 8001f32:	eb64 0402 	sbc.w	r4, r4, r2
 8001f36:	f04f 0100 	mov.w	r1, #0
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	00e2      	lsls	r2, r4, #3
 8001f40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f44:	00d9      	lsls	r1, r3, #3
 8001f46:	460b      	mov	r3, r1
 8001f48:	4614      	mov	r4, r2
 8001f4a:	195b      	adds	r3, r3, r5
 8001f4c:	eb44 0406 	adc.w	r4, r4, r6
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	02a2      	lsls	r2, r4, #10
 8001f5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f5e:	0299      	lsls	r1, r3, #10
 8001f60:	460b      	mov	r3, r1
 8001f62:	4614      	mov	r4, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	4621      	mov	r1, r4
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f04f 0400 	mov.w	r4, #0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4623      	mov	r3, r4
 8001f72:	f7fe f9a5 	bl	80002c0 <__aeabi_uldivmod>
 8001f76:	4603      	mov	r3, r0
 8001f78:	460c      	mov	r4, r1
 8001f7a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	0f1b      	lsrs	r3, r3, #28
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	613b      	str	r3, [r7, #16]
      break;
 8001f92:	e002      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001f96:	613b      	str	r3, [r7, #16]
      break;
 8001f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9a:	693b      	ldr	r3, [r7, #16]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	00f42400 	.word	0x00f42400
 8001fac:	007a1200 	.word	0x007a1200

08001fb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8083 	beq.w	80020d0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fca:	4b95      	ldr	r3, [pc, #596]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d019      	beq.n	800200a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fd6:	4b92      	ldr	r3, [pc, #584]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d106      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fe2:	4b8f      	ldr	r3, [pc, #572]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fee:	d00c      	beq.n	800200a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff0:	4b8b      	ldr	r3, [pc, #556]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d112      	bne.n	8002022 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffc:	4b88      	ldr	r3, [pc, #544]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002008:	d10b      	bne.n	8002022 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200a:	4b85      	ldr	r3, [pc, #532]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d05b      	beq.n	80020ce <HAL_RCC_OscConfig+0x11e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d157      	bne.n	80020ce <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e216      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x8a>
 800202c:	4b7c      	ldr	r3, [pc, #496]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a7b      	ldr	r2, [pc, #492]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e01d      	b.n	8002076 <HAL_RCC_OscConfig+0xc6>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002042:	d10c      	bne.n	800205e <HAL_RCC_OscConfig+0xae>
 8002044:	4b76      	ldr	r3, [pc, #472]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a75      	ldr	r2, [pc, #468]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 800204a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b73      	ldr	r3, [pc, #460]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a72      	ldr	r2, [pc, #456]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	e00b      	b.n	8002076 <HAL_RCC_OscConfig+0xc6>
 800205e:	4b70      	ldr	r3, [pc, #448]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6f      	ldr	r2, [pc, #444]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b6d      	ldr	r3, [pc, #436]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a6c      	ldr	r2, [pc, #432]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d013      	beq.n	80020a6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7ff fa1d 	bl	80014bc <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002086:	f7ff fa19 	bl	80014bc <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b64      	cmp	r3, #100	; 0x64
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1db      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002098:	4b61      	ldr	r3, [pc, #388]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0xd6>
 80020a4:	e014      	b.n	80020d0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7ff fa09 	bl	80014bc <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ae:	f7ff fa05 	bl	80014bc <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b64      	cmp	r3, #100	; 0x64
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1c7      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c0:	4b57      	ldr	r3, [pc, #348]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f0      	bne.n	80020ae <HAL_RCC_OscConfig+0xfe>
 80020cc:	e000      	b.n	80020d0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d06f      	beq.n	80021bc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d017      	beq.n	8002118 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020e8:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d105      	bne.n	8002100 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020f4:	4b4a      	ldr	r3, [pc, #296]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00b      	beq.n	8002118 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002100:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002108:	2b0c      	cmp	r3, #12
 800210a:	d11c      	bne.n	8002146 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210c:	4b44      	ldr	r3, [pc, #272]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d116      	bne.n	8002146 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002118:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_OscConfig+0x180>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d001      	beq.n	8002130 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e18f      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4938      	ldr	r1, [pc, #224]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002144:	e03a      	b.n	80021bc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d020      	beq.n	8002190 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214e:	4b35      	ldr	r3, [pc, #212]	; (8002224 <HAL_RCC_OscConfig+0x274>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7ff f9b2 	bl	80014bc <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215c:	f7ff f9ae 	bl	80014bc <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e170      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4925      	ldr	r1, [pc, #148]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
 800218e:	e015      	b.n	80021bc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_RCC_OscConfig+0x274>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7ff f991 	bl	80014bc <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219e:	f7ff f98d 	bl	80014bc <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e14f      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f0      	bne.n	800219e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d037      	beq.n	8002238 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d016      	beq.n	80021fe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_RCC_OscConfig+0x278>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7ff f971 	bl	80014bc <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021de:	f7ff f96d 	bl	80014bc <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e12f      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 80021f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x22e>
 80021fc:	e01c      	b.n	8002238 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_RCC_OscConfig+0x278>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002204:	f7ff f95a 	bl	80014bc <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220a:	e00f      	b.n	800222c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220c:	f7ff f956 	bl	80014bc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d908      	bls.n	800222c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e118      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800
 8002224:	42470000 	.word	0x42470000
 8002228:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	4b8a      	ldr	r3, [pc, #552]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 800222e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1e9      	bne.n	800220c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8097 	beq.w	8002374 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224a:	4b83      	ldr	r3, [pc, #524]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10f      	bne.n	8002276 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b7f      	ldr	r3, [pc, #508]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a7e      	ldr	r2, [pc, #504]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b7c      	ldr	r3, [pc, #496]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002272:	2301      	movs	r3, #1
 8002274:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	4b79      	ldr	r3, [pc, #484]	; (800245c <HAL_RCC_OscConfig+0x4ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d118      	bne.n	80022b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002282:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0x4ac>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a75      	ldr	r2, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x4ac>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7ff f915 	bl	80014bc <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7ff f911 	bl	80014bc <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e0d3      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	4b6c      	ldr	r3, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x4ac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x31a>
 80022bc:	4b66      	ldr	r3, [pc, #408]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a65      	ldr	r2, [pc, #404]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
 80022c8:	e01c      	b.n	8002304 <HAL_RCC_OscConfig+0x354>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x33c>
 80022d2:	4b61      	ldr	r3, [pc, #388]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a60      	ldr	r2, [pc, #384]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
 80022de:	4b5e      	ldr	r3, [pc, #376]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	4a5d      	ldr	r2, [pc, #372]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0x354>
 80022ec:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4a59      	ldr	r2, [pc, #356]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	6713      	str	r3, [r2, #112]	; 0x70
 80022f8:	4b57      	ldr	r3, [pc, #348]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	4a56      	ldr	r2, [pc, #344]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 80022fe:	f023 0304 	bic.w	r3, r3, #4
 8002302:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d015      	beq.n	8002338 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7ff f8d6 	bl	80014bc <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002312:	e00a      	b.n	800232a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002314:	f7ff f8d2 	bl	80014bc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e092      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232a:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0ee      	beq.n	8002314 <HAL_RCC_OscConfig+0x364>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7ff f8c0 	bl	80014bc <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7ff f8bc 	bl	80014bc <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e07c      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002356:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1ee      	bne.n	8002340 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002362:	7dfb      	ldrb	r3, [r7, #23]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002368:	4b3b      	ldr	r3, [pc, #236]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	4a3a      	ldr	r2, [pc, #232]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 800236e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002372:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d068      	beq.n	800244e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800237c:	4b36      	ldr	r3, [pc, #216]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d060      	beq.n	800244a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d145      	bne.n	800241c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002390:	4b33      	ldr	r3, [pc, #204]	; (8002460 <HAL_RCC_OscConfig+0x4b0>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7ff f891 	bl	80014bc <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239e:	f7ff f88d 	bl	80014bc <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e04f      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69da      	ldr	r2, [r3, #28]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	019b      	lsls	r3, r3, #6
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	3b01      	subs	r3, #1
 80023d6:	041b      	lsls	r3, r3, #16
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	071b      	lsls	r3, r3, #28
 80023e8:	491b      	ldr	r1, [pc, #108]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <HAL_RCC_OscConfig+0x4b0>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff f862 	bl	80014bc <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7ff f85e 	bl	80014bc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e020      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x44c>
 800241a:	e018      	b.n	800244e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_RCC_OscConfig+0x4b0>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7ff f84b 	bl	80014bc <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242a:	f7ff f847 	bl	80014bc <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e009      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_OscConfig+0x4a8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0x47a>
 8002448:	e001      	b.n	800244e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	40007000 	.word	0x40007000
 8002460:	42470060 	.word	0x42470060

08002464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e03f      	b.n	80024f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe fe56 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	; 0x24
 8002494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f90b 	bl	80026c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b088      	sub	sp, #32
 8002502:	af02      	add	r7, sp, #8
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	f040 8083 	bne.w	8002626 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_UART_Transmit+0x2e>
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e07b      	b.n	8002628 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_UART_Transmit+0x40>
 800253a:	2302      	movs	r3, #2
 800253c:	e074      	b.n	8002628 <HAL_UART_Transmit+0x12a>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2221      	movs	r2, #33	; 0x21
 8002550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002554:	f7fe ffb2 	bl	80014bc <HAL_GetTick>
 8002558:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	88fa      	ldrh	r2, [r7, #6]
 800255e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	88fa      	ldrh	r2, [r7, #6]
 8002564:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800256e:	e042      	b.n	80025f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002586:	d122      	bne.n	80025ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2200      	movs	r2, #0
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f84c 	bl	8002630 <UART_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e042      	b.n	8002628 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3302      	adds	r3, #2
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	e017      	b.n	80025f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	e013      	b.n	80025f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2200      	movs	r2, #0
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f829 	bl	8002630 <UART_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e01f      	b.n	8002628 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	60ba      	str	r2, [r7, #8]
 80025ee:	781a      	ldrb	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1b7      	bne.n	8002570 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2200      	movs	r2, #0
 8002608:	2140      	movs	r1, #64	; 0x40
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f810 	bl	8002630 <UART_WaitOnFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e006      	b.n	8002628 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002626:	2302      	movs	r3, #2
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002640:	e02c      	b.n	800269c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d028      	beq.n	800269c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <UART_WaitOnFlagUntilTimeout+0x30>
 8002650:	f7fe ff34 	bl	80014bc <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	429a      	cmp	r2, r3
 800265e:	d21d      	bcs.n	800269c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800266e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e00f      	b.n	80026bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d0c3      	beq.n	8002642 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002706:	f023 030c 	bic.w	r3, r3, #12
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	68f9      	ldr	r1, [r7, #12]
 8002710:	430b      	orrs	r3, r1
 8002712:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002732:	f040 818b 	bne.w	8002a4c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4ac1      	ldr	r2, [pc, #772]	; (8002a40 <UART_SetConfig+0x37c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d005      	beq.n	800274c <UART_SetConfig+0x88>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4abf      	ldr	r2, [pc, #764]	; (8002a44 <UART_SetConfig+0x380>)
 8002746:	4293      	cmp	r3, r2
 8002748:	f040 80bd 	bne.w	80028c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800274c:	f7ff fa7c 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8002750:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	461d      	mov	r5, r3
 8002756:	f04f 0600 	mov.w	r6, #0
 800275a:	46a8      	mov	r8, r5
 800275c:	46b1      	mov	r9, r6
 800275e:	eb18 0308 	adds.w	r3, r8, r8
 8002762:	eb49 0409 	adc.w	r4, r9, r9
 8002766:	4698      	mov	r8, r3
 8002768:	46a1      	mov	r9, r4
 800276a:	eb18 0805 	adds.w	r8, r8, r5
 800276e:	eb49 0906 	adc.w	r9, r9, r6
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800277e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002782:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002786:	4688      	mov	r8, r1
 8002788:	4691      	mov	r9, r2
 800278a:	eb18 0005 	adds.w	r0, r8, r5
 800278e:	eb49 0106 	adc.w	r1, r9, r6
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	461d      	mov	r5, r3
 8002798:	f04f 0600 	mov.w	r6, #0
 800279c:	196b      	adds	r3, r5, r5
 800279e:	eb46 0406 	adc.w	r4, r6, r6
 80027a2:	461a      	mov	r2, r3
 80027a4:	4623      	mov	r3, r4
 80027a6:	f7fd fd8b 	bl	80002c0 <__aeabi_uldivmod>
 80027aa:	4603      	mov	r3, r0
 80027ac:	460c      	mov	r4, r1
 80027ae:	461a      	mov	r2, r3
 80027b0:	4ba5      	ldr	r3, [pc, #660]	; (8002a48 <UART_SetConfig+0x384>)
 80027b2:	fba3 2302 	umull	r2, r3, r3, r2
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	461d      	mov	r5, r3
 80027c0:	f04f 0600 	mov.w	r6, #0
 80027c4:	46a9      	mov	r9, r5
 80027c6:	46b2      	mov	sl, r6
 80027c8:	eb19 0309 	adds.w	r3, r9, r9
 80027cc:	eb4a 040a 	adc.w	r4, sl, sl
 80027d0:	4699      	mov	r9, r3
 80027d2:	46a2      	mov	sl, r4
 80027d4:	eb19 0905 	adds.w	r9, r9, r5
 80027d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80027dc:	f04f 0100 	mov.w	r1, #0
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027f0:	4689      	mov	r9, r1
 80027f2:	4692      	mov	sl, r2
 80027f4:	eb19 0005 	adds.w	r0, r9, r5
 80027f8:	eb4a 0106 	adc.w	r1, sl, r6
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	461d      	mov	r5, r3
 8002802:	f04f 0600 	mov.w	r6, #0
 8002806:	196b      	adds	r3, r5, r5
 8002808:	eb46 0406 	adc.w	r4, r6, r6
 800280c:	461a      	mov	r2, r3
 800280e:	4623      	mov	r3, r4
 8002810:	f7fd fd56 	bl	80002c0 <__aeabi_uldivmod>
 8002814:	4603      	mov	r3, r0
 8002816:	460c      	mov	r4, r1
 8002818:	461a      	mov	r2, r3
 800281a:	4b8b      	ldr	r3, [pc, #556]	; (8002a48 <UART_SetConfig+0x384>)
 800281c:	fba3 1302 	umull	r1, r3, r3, r2
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	2164      	movs	r1, #100	; 0x64
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	3332      	adds	r3, #50	; 0x32
 800282e:	4a86      	ldr	r2, [pc, #536]	; (8002a48 <UART_SetConfig+0x384>)
 8002830:	fba2 2303 	umull	r2, r3, r2, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800283c:	4498      	add	r8, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	461d      	mov	r5, r3
 8002842:	f04f 0600 	mov.w	r6, #0
 8002846:	46a9      	mov	r9, r5
 8002848:	46b2      	mov	sl, r6
 800284a:	eb19 0309 	adds.w	r3, r9, r9
 800284e:	eb4a 040a 	adc.w	r4, sl, sl
 8002852:	4699      	mov	r9, r3
 8002854:	46a2      	mov	sl, r4
 8002856:	eb19 0905 	adds.w	r9, r9, r5
 800285a:	eb4a 0a06 	adc.w	sl, sl, r6
 800285e:	f04f 0100 	mov.w	r1, #0
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800286a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800286e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002872:	4689      	mov	r9, r1
 8002874:	4692      	mov	sl, r2
 8002876:	eb19 0005 	adds.w	r0, r9, r5
 800287a:	eb4a 0106 	adc.w	r1, sl, r6
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	461d      	mov	r5, r3
 8002884:	f04f 0600 	mov.w	r6, #0
 8002888:	196b      	adds	r3, r5, r5
 800288a:	eb46 0406 	adc.w	r4, r6, r6
 800288e:	461a      	mov	r2, r3
 8002890:	4623      	mov	r3, r4
 8002892:	f7fd fd15 	bl	80002c0 <__aeabi_uldivmod>
 8002896:	4603      	mov	r3, r0
 8002898:	460c      	mov	r4, r1
 800289a:	461a      	mov	r2, r3
 800289c:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <UART_SetConfig+0x384>)
 800289e:	fba3 1302 	umull	r1, r3, r3, r2
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2164      	movs	r1, #100	; 0x64
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	3332      	adds	r3, #50	; 0x32
 80028b0:	4a65      	ldr	r2, [pc, #404]	; (8002a48 <UART_SetConfig+0x384>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	f003 0207 	and.w	r2, r3, #7
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4442      	add	r2, r8
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	e26f      	b.n	8002da6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028c6:	f7ff f9ab 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 80028ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	461d      	mov	r5, r3
 80028d0:	f04f 0600 	mov.w	r6, #0
 80028d4:	46a8      	mov	r8, r5
 80028d6:	46b1      	mov	r9, r6
 80028d8:	eb18 0308 	adds.w	r3, r8, r8
 80028dc:	eb49 0409 	adc.w	r4, r9, r9
 80028e0:	4698      	mov	r8, r3
 80028e2:	46a1      	mov	r9, r4
 80028e4:	eb18 0805 	adds.w	r8, r8, r5
 80028e8:	eb49 0906 	adc.w	r9, r9, r6
 80028ec:	f04f 0100 	mov.w	r1, #0
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002900:	4688      	mov	r8, r1
 8002902:	4691      	mov	r9, r2
 8002904:	eb18 0005 	adds.w	r0, r8, r5
 8002908:	eb49 0106 	adc.w	r1, r9, r6
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	461d      	mov	r5, r3
 8002912:	f04f 0600 	mov.w	r6, #0
 8002916:	196b      	adds	r3, r5, r5
 8002918:	eb46 0406 	adc.w	r4, r6, r6
 800291c:	461a      	mov	r2, r3
 800291e:	4623      	mov	r3, r4
 8002920:	f7fd fcce 	bl	80002c0 <__aeabi_uldivmod>
 8002924:	4603      	mov	r3, r0
 8002926:	460c      	mov	r4, r1
 8002928:	461a      	mov	r2, r3
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <UART_SetConfig+0x384>)
 800292c:	fba3 2302 	umull	r2, r3, r3, r2
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	461d      	mov	r5, r3
 800293a:	f04f 0600 	mov.w	r6, #0
 800293e:	46a9      	mov	r9, r5
 8002940:	46b2      	mov	sl, r6
 8002942:	eb19 0309 	adds.w	r3, r9, r9
 8002946:	eb4a 040a 	adc.w	r4, sl, sl
 800294a:	4699      	mov	r9, r3
 800294c:	46a2      	mov	sl, r4
 800294e:	eb19 0905 	adds.w	r9, r9, r5
 8002952:	eb4a 0a06 	adc.w	sl, sl, r6
 8002956:	f04f 0100 	mov.w	r1, #0
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002962:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002966:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800296a:	4689      	mov	r9, r1
 800296c:	4692      	mov	sl, r2
 800296e:	eb19 0005 	adds.w	r0, r9, r5
 8002972:	eb4a 0106 	adc.w	r1, sl, r6
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	461d      	mov	r5, r3
 800297c:	f04f 0600 	mov.w	r6, #0
 8002980:	196b      	adds	r3, r5, r5
 8002982:	eb46 0406 	adc.w	r4, r6, r6
 8002986:	461a      	mov	r2, r3
 8002988:	4623      	mov	r3, r4
 800298a:	f7fd fc99 	bl	80002c0 <__aeabi_uldivmod>
 800298e:	4603      	mov	r3, r0
 8002990:	460c      	mov	r4, r1
 8002992:	461a      	mov	r2, r3
 8002994:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <UART_SetConfig+0x384>)
 8002996:	fba3 1302 	umull	r1, r3, r3, r2
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2164      	movs	r1, #100	; 0x64
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	3332      	adds	r3, #50	; 0x32
 80029a8:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <UART_SetConfig+0x384>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029b6:	4498      	add	r8, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	461d      	mov	r5, r3
 80029bc:	f04f 0600 	mov.w	r6, #0
 80029c0:	46a9      	mov	r9, r5
 80029c2:	46b2      	mov	sl, r6
 80029c4:	eb19 0309 	adds.w	r3, r9, r9
 80029c8:	eb4a 040a 	adc.w	r4, sl, sl
 80029cc:	4699      	mov	r9, r3
 80029ce:	46a2      	mov	sl, r4
 80029d0:	eb19 0905 	adds.w	r9, r9, r5
 80029d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029ec:	4689      	mov	r9, r1
 80029ee:	4692      	mov	sl, r2
 80029f0:	eb19 0005 	adds.w	r0, r9, r5
 80029f4:	eb4a 0106 	adc.w	r1, sl, r6
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	461d      	mov	r5, r3
 80029fe:	f04f 0600 	mov.w	r6, #0
 8002a02:	196b      	adds	r3, r5, r5
 8002a04:	eb46 0406 	adc.w	r4, r6, r6
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	f7fd fc58 	bl	80002c0 <__aeabi_uldivmod>
 8002a10:	4603      	mov	r3, r0
 8002a12:	460c      	mov	r4, r1
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <UART_SetConfig+0x384>)
 8002a18:	fba3 1302 	umull	r1, r3, r3, r2
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	2164      	movs	r1, #100	; 0x64
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	3332      	adds	r3, #50	; 0x32
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <UART_SetConfig+0x384>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	f003 0207 	and.w	r2, r3, #7
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4442      	add	r2, r8
 8002a3c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002a3e:	e1b2      	b.n	8002da6 <UART_SetConfig+0x6e2>
 8002a40:	40011000 	.word	0x40011000
 8002a44:	40011400 	.word	0x40011400
 8002a48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4ad7      	ldr	r2, [pc, #860]	; (8002db0 <UART_SetConfig+0x6ec>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d005      	beq.n	8002a62 <UART_SetConfig+0x39e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4ad6      	ldr	r2, [pc, #856]	; (8002db4 <UART_SetConfig+0x6f0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	f040 80d1 	bne.w	8002c04 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a62:	f7ff f8f1 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8002a66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	469a      	mov	sl, r3
 8002a6c:	f04f 0b00 	mov.w	fp, #0
 8002a70:	46d0      	mov	r8, sl
 8002a72:	46d9      	mov	r9, fp
 8002a74:	eb18 0308 	adds.w	r3, r8, r8
 8002a78:	eb49 0409 	adc.w	r4, r9, r9
 8002a7c:	4698      	mov	r8, r3
 8002a7e:	46a1      	mov	r9, r4
 8002a80:	eb18 080a 	adds.w	r8, r8, sl
 8002a84:	eb49 090b 	adc.w	r9, r9, fp
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a9c:	4688      	mov	r8, r1
 8002a9e:	4691      	mov	r9, r2
 8002aa0:	eb1a 0508 	adds.w	r5, sl, r8
 8002aa4:	eb4b 0609 	adc.w	r6, fp, r9
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4619      	mov	r1, r3
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	f04f 0400 	mov.w	r4, #0
 8002aba:	0094      	lsls	r4, r2, #2
 8002abc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ac0:	008b      	lsls	r3, r1, #2
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	4631      	mov	r1, r6
 8002aca:	f7fd fbf9 	bl	80002c0 <__aeabi_uldivmod>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4bb8      	ldr	r3, [pc, #736]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	469b      	mov	fp, r3
 8002ae4:	f04f 0c00 	mov.w	ip, #0
 8002ae8:	46d9      	mov	r9, fp
 8002aea:	46e2      	mov	sl, ip
 8002aec:	eb19 0309 	adds.w	r3, r9, r9
 8002af0:	eb4a 040a 	adc.w	r4, sl, sl
 8002af4:	4699      	mov	r9, r3
 8002af6:	46a2      	mov	sl, r4
 8002af8:	eb19 090b 	adds.w	r9, r9, fp
 8002afc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b00:	f04f 0100 	mov.w	r1, #0
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b14:	4689      	mov	r9, r1
 8002b16:	4692      	mov	sl, r2
 8002b18:	eb1b 0509 	adds.w	r5, fp, r9
 8002b1c:	eb4c 060a 	adc.w	r6, ip, sl
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4619      	mov	r1, r3
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	f04f 0400 	mov.w	r4, #0
 8002b32:	0094      	lsls	r4, r2, #2
 8002b34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b38:	008b      	lsls	r3, r1, #2
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4623      	mov	r3, r4
 8002b3e:	4628      	mov	r0, r5
 8002b40:	4631      	mov	r1, r6
 8002b42:	f7fd fbbd 	bl	80002c0 <__aeabi_uldivmod>
 8002b46:	4603      	mov	r3, r0
 8002b48:	460c      	mov	r4, r1
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b9a      	ldr	r3, [pc, #616]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2164      	movs	r1, #100	; 0x64
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	3332      	adds	r3, #50	; 0x32
 8002b60:	4a95      	ldr	r2, [pc, #596]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6c:	4498      	add	r8, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	469b      	mov	fp, r3
 8002b72:	f04f 0c00 	mov.w	ip, #0
 8002b76:	46d9      	mov	r9, fp
 8002b78:	46e2      	mov	sl, ip
 8002b7a:	eb19 0309 	adds.w	r3, r9, r9
 8002b7e:	eb4a 040a 	adc.w	r4, sl, sl
 8002b82:	4699      	mov	r9, r3
 8002b84:	46a2      	mov	sl, r4
 8002b86:	eb19 090b 	adds.w	r9, r9, fp
 8002b8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ba2:	4689      	mov	r9, r1
 8002ba4:	4692      	mov	sl, r2
 8002ba6:	eb1b 0509 	adds.w	r5, fp, r9
 8002baa:	eb4c 060a 	adc.w	r6, ip, sl
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	f04f 0400 	mov.w	r4, #0
 8002bc0:	0094      	lsls	r4, r2, #2
 8002bc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bc6:	008b      	lsls	r3, r1, #2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4623      	mov	r3, r4
 8002bcc:	4628      	mov	r0, r5
 8002bce:	4631      	mov	r1, r6
 8002bd0:	f7fd fb76 	bl	80002c0 <__aeabi_uldivmod>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b77      	ldr	r3, [pc, #476]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	2164      	movs	r1, #100	; 0x64
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	3332      	adds	r3, #50	; 0x32
 8002bee:	4a72      	ldr	r2, [pc, #456]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	f003 020f 	and.w	r2, r3, #15
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4442      	add	r2, r8
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	e0d0      	b.n	8002da6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c04:	f7ff f80c 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 8002c08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	469a      	mov	sl, r3
 8002c0e:	f04f 0b00 	mov.w	fp, #0
 8002c12:	46d0      	mov	r8, sl
 8002c14:	46d9      	mov	r9, fp
 8002c16:	eb18 0308 	adds.w	r3, r8, r8
 8002c1a:	eb49 0409 	adc.w	r4, r9, r9
 8002c1e:	4698      	mov	r8, r3
 8002c20:	46a1      	mov	r9, r4
 8002c22:	eb18 080a 	adds.w	r8, r8, sl
 8002c26:	eb49 090b 	adc.w	r9, r9, fp
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c3e:	4688      	mov	r8, r1
 8002c40:	4691      	mov	r9, r2
 8002c42:	eb1a 0508 	adds.w	r5, sl, r8
 8002c46:	eb4b 0609 	adc.w	r6, fp, r9
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	f04f 0400 	mov.w	r4, #0
 8002c5c:	0094      	lsls	r4, r2, #2
 8002c5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c62:	008b      	lsls	r3, r1, #2
 8002c64:	461a      	mov	r2, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	4628      	mov	r0, r5
 8002c6a:	4631      	mov	r1, r6
 8002c6c:	f7fd fb28 	bl	80002c0 <__aeabi_uldivmod>
 8002c70:	4603      	mov	r3, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002c78:	fba3 2302 	umull	r2, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	469b      	mov	fp, r3
 8002c86:	f04f 0c00 	mov.w	ip, #0
 8002c8a:	46d9      	mov	r9, fp
 8002c8c:	46e2      	mov	sl, ip
 8002c8e:	eb19 0309 	adds.w	r3, r9, r9
 8002c92:	eb4a 040a 	adc.w	r4, sl, sl
 8002c96:	4699      	mov	r9, r3
 8002c98:	46a2      	mov	sl, r4
 8002c9a:	eb19 090b 	adds.w	r9, r9, fp
 8002c9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ca2:	f04f 0100 	mov.w	r1, #0
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cb6:	4689      	mov	r9, r1
 8002cb8:	4692      	mov	sl, r2
 8002cba:	eb1b 0509 	adds.w	r5, fp, r9
 8002cbe:	eb4c 060a 	adc.w	r6, ip, sl
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	f04f 0400 	mov.w	r4, #0
 8002cd4:	0094      	lsls	r4, r2, #2
 8002cd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cda:	008b      	lsls	r3, r1, #2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	4631      	mov	r1, r6
 8002ce4:	f7fd faec 	bl	80002c0 <__aeabi_uldivmod>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	460c      	mov	r4, r1
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b32      	ldr	r3, [pc, #200]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	2164      	movs	r1, #100	; 0x64
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	3332      	adds	r3, #50	; 0x32
 8002d02:	4a2d      	ldr	r2, [pc, #180]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0e:	4498      	add	r8, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	469b      	mov	fp, r3
 8002d14:	f04f 0c00 	mov.w	ip, #0
 8002d18:	46d9      	mov	r9, fp
 8002d1a:	46e2      	mov	sl, ip
 8002d1c:	eb19 0309 	adds.w	r3, r9, r9
 8002d20:	eb4a 040a 	adc.w	r4, sl, sl
 8002d24:	4699      	mov	r9, r3
 8002d26:	46a2      	mov	sl, r4
 8002d28:	eb19 090b 	adds.w	r9, r9, fp
 8002d2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d30:	f04f 0100 	mov.w	r1, #0
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d44:	4689      	mov	r9, r1
 8002d46:	4692      	mov	sl, r2
 8002d48:	eb1b 0509 	adds.w	r5, fp, r9
 8002d4c:	eb4c 060a 	adc.w	r6, ip, sl
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4619      	mov	r1, r3
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	f04f 0400 	mov.w	r4, #0
 8002d62:	0094      	lsls	r4, r2, #2
 8002d64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d68:	008b      	lsls	r3, r1, #2
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4623      	mov	r3, r4
 8002d6e:	4628      	mov	r0, r5
 8002d70:	4631      	mov	r1, r6
 8002d72:	f7fd faa5 	bl	80002c0 <__aeabi_uldivmod>
 8002d76:	4603      	mov	r3, r0
 8002d78:	460c      	mov	r4, r1
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2164      	movs	r1, #100	; 0x64
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	3332      	adds	r3, #50	; 0x32
 8002d90:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4442      	add	r2, r8
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	e7ff      	b.n	8002da6 <UART_SetConfig+0x6e2>
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db0:	40011000 	.word	0x40011000
 8002db4:	40011400 	.word	0x40011400
 8002db8:	51eb851f 	.word	0x51eb851f

08002dbc <__errno>:
 8002dbc:	4b01      	ldr	r3, [pc, #4]	; (8002dc4 <__errno+0x8>)
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	2000000c 	.word	0x2000000c

08002dc8 <__libc_init_array>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	4e0d      	ldr	r6, [pc, #52]	; (8002e00 <__libc_init_array+0x38>)
 8002dcc:	4c0d      	ldr	r4, [pc, #52]	; (8002e04 <__libc_init_array+0x3c>)
 8002dce:	1ba4      	subs	r4, r4, r6
 8002dd0:	10a4      	asrs	r4, r4, #2
 8002dd2:	2500      	movs	r5, #0
 8002dd4:	42a5      	cmp	r5, r4
 8002dd6:	d109      	bne.n	8002dec <__libc_init_array+0x24>
 8002dd8:	4e0b      	ldr	r6, [pc, #44]	; (8002e08 <__libc_init_array+0x40>)
 8002dda:	4c0c      	ldr	r4, [pc, #48]	; (8002e0c <__libc_init_array+0x44>)
 8002ddc:	f000 ffba 	bl	8003d54 <_init>
 8002de0:	1ba4      	subs	r4, r4, r6
 8002de2:	10a4      	asrs	r4, r4, #2
 8002de4:	2500      	movs	r5, #0
 8002de6:	42a5      	cmp	r5, r4
 8002de8:	d105      	bne.n	8002df6 <__libc_init_array+0x2e>
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002df0:	4798      	blx	r3
 8002df2:	3501      	adds	r5, #1
 8002df4:	e7ee      	b.n	8002dd4 <__libc_init_array+0xc>
 8002df6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dfa:	4798      	blx	r3
 8002dfc:	3501      	adds	r5, #1
 8002dfe:	e7f2      	b.n	8002de6 <__libc_init_array+0x1e>
 8002e00:	08004338 	.word	0x08004338
 8002e04:	08004338 	.word	0x08004338
 8002e08:	08004338 	.word	0x08004338
 8002e0c:	0800433c 	.word	0x0800433c

08002e10 <malloc>:
 8002e10:	4b02      	ldr	r3, [pc, #8]	; (8002e1c <malloc+0xc>)
 8002e12:	4601      	mov	r1, r0
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	f000 b859 	b.w	8002ecc <_malloc_r>
 8002e1a:	bf00      	nop
 8002e1c:	2000000c 	.word	0x2000000c

08002e20 <memset>:
 8002e20:	4402      	add	r2, r0
 8002e22:	4603      	mov	r3, r0
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d100      	bne.n	8002e2a <memset+0xa>
 8002e28:	4770      	bx	lr
 8002e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e2e:	e7f9      	b.n	8002e24 <memset+0x4>

08002e30 <_free_r>:
 8002e30:	b538      	push	{r3, r4, r5, lr}
 8002e32:	4605      	mov	r5, r0
 8002e34:	2900      	cmp	r1, #0
 8002e36:	d045      	beq.n	8002ec4 <_free_r+0x94>
 8002e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e3c:	1f0c      	subs	r4, r1, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bfb8      	it	lt
 8002e42:	18e4      	addlt	r4, r4, r3
 8002e44:	f000 fbda 	bl	80035fc <__malloc_lock>
 8002e48:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <_free_r+0x98>)
 8002e4a:	6813      	ldr	r3, [r2, #0]
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	b933      	cbnz	r3, 8002e5e <_free_r+0x2e>
 8002e50:	6063      	str	r3, [r4, #4]
 8002e52:	6014      	str	r4, [r2, #0]
 8002e54:	4628      	mov	r0, r5
 8002e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e5a:	f000 bbd0 	b.w	80035fe <__malloc_unlock>
 8002e5e:	42a3      	cmp	r3, r4
 8002e60:	d90c      	bls.n	8002e7c <_free_r+0x4c>
 8002e62:	6821      	ldr	r1, [r4, #0]
 8002e64:	1862      	adds	r2, r4, r1
 8002e66:	4293      	cmp	r3, r2
 8002e68:	bf04      	itt	eq
 8002e6a:	681a      	ldreq	r2, [r3, #0]
 8002e6c:	685b      	ldreq	r3, [r3, #4]
 8002e6e:	6063      	str	r3, [r4, #4]
 8002e70:	bf04      	itt	eq
 8002e72:	1852      	addeq	r2, r2, r1
 8002e74:	6022      	streq	r2, [r4, #0]
 8002e76:	6004      	str	r4, [r0, #0]
 8002e78:	e7ec      	b.n	8002e54 <_free_r+0x24>
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	b10a      	cbz	r2, 8002e84 <_free_r+0x54>
 8002e80:	42a2      	cmp	r2, r4
 8002e82:	d9fa      	bls.n	8002e7a <_free_r+0x4a>
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	1858      	adds	r0, r3, r1
 8002e88:	42a0      	cmp	r0, r4
 8002e8a:	d10b      	bne.n	8002ea4 <_free_r+0x74>
 8002e8c:	6820      	ldr	r0, [r4, #0]
 8002e8e:	4401      	add	r1, r0
 8002e90:	1858      	adds	r0, r3, r1
 8002e92:	4282      	cmp	r2, r0
 8002e94:	6019      	str	r1, [r3, #0]
 8002e96:	d1dd      	bne.n	8002e54 <_free_r+0x24>
 8002e98:	6810      	ldr	r0, [r2, #0]
 8002e9a:	6852      	ldr	r2, [r2, #4]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	4401      	add	r1, r0
 8002ea0:	6019      	str	r1, [r3, #0]
 8002ea2:	e7d7      	b.n	8002e54 <_free_r+0x24>
 8002ea4:	d902      	bls.n	8002eac <_free_r+0x7c>
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	602b      	str	r3, [r5, #0]
 8002eaa:	e7d3      	b.n	8002e54 <_free_r+0x24>
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	1821      	adds	r1, r4, r0
 8002eb0:	428a      	cmp	r2, r1
 8002eb2:	bf04      	itt	eq
 8002eb4:	6811      	ldreq	r1, [r2, #0]
 8002eb6:	6852      	ldreq	r2, [r2, #4]
 8002eb8:	6062      	str	r2, [r4, #4]
 8002eba:	bf04      	itt	eq
 8002ebc:	1809      	addeq	r1, r1, r0
 8002ebe:	6021      	streq	r1, [r4, #0]
 8002ec0:	605c      	str	r4, [r3, #4]
 8002ec2:	e7c7      	b.n	8002e54 <_free_r+0x24>
 8002ec4:	bd38      	pop	{r3, r4, r5, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000090 	.word	0x20000090

08002ecc <_malloc_r>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	1ccd      	adds	r5, r1, #3
 8002ed0:	f025 0503 	bic.w	r5, r5, #3
 8002ed4:	3508      	adds	r5, #8
 8002ed6:	2d0c      	cmp	r5, #12
 8002ed8:	bf38      	it	cc
 8002eda:	250c      	movcc	r5, #12
 8002edc:	2d00      	cmp	r5, #0
 8002ede:	4606      	mov	r6, r0
 8002ee0:	db01      	blt.n	8002ee6 <_malloc_r+0x1a>
 8002ee2:	42a9      	cmp	r1, r5
 8002ee4:	d903      	bls.n	8002eee <_malloc_r+0x22>
 8002ee6:	230c      	movs	r3, #12
 8002ee8:	6033      	str	r3, [r6, #0]
 8002eea:	2000      	movs	r0, #0
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
 8002eee:	f000 fb85 	bl	80035fc <__malloc_lock>
 8002ef2:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <_malloc_r+0xac>)
 8002ef4:	6814      	ldr	r4, [r2, #0]
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	b991      	cbnz	r1, 8002f20 <_malloc_r+0x54>
 8002efa:	4c20      	ldr	r4, [pc, #128]	; (8002f7c <_malloc_r+0xb0>)
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	b91b      	cbnz	r3, 8002f08 <_malloc_r+0x3c>
 8002f00:	4630      	mov	r0, r6
 8002f02:	f000 f8cd 	bl	80030a0 <_sbrk_r>
 8002f06:	6020      	str	r0, [r4, #0]
 8002f08:	4629      	mov	r1, r5
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	f000 f8c8 	bl	80030a0 <_sbrk_r>
 8002f10:	1c43      	adds	r3, r0, #1
 8002f12:	d124      	bne.n	8002f5e <_malloc_r+0x92>
 8002f14:	230c      	movs	r3, #12
 8002f16:	6033      	str	r3, [r6, #0]
 8002f18:	4630      	mov	r0, r6
 8002f1a:	f000 fb70 	bl	80035fe <__malloc_unlock>
 8002f1e:	e7e4      	b.n	8002eea <_malloc_r+0x1e>
 8002f20:	680b      	ldr	r3, [r1, #0]
 8002f22:	1b5b      	subs	r3, r3, r5
 8002f24:	d418      	bmi.n	8002f58 <_malloc_r+0x8c>
 8002f26:	2b0b      	cmp	r3, #11
 8002f28:	d90f      	bls.n	8002f4a <_malloc_r+0x7e>
 8002f2a:	600b      	str	r3, [r1, #0]
 8002f2c:	50cd      	str	r5, [r1, r3]
 8002f2e:	18cc      	adds	r4, r1, r3
 8002f30:	4630      	mov	r0, r6
 8002f32:	f000 fb64 	bl	80035fe <__malloc_unlock>
 8002f36:	f104 000b 	add.w	r0, r4, #11
 8002f3a:	1d23      	adds	r3, r4, #4
 8002f3c:	f020 0007 	bic.w	r0, r0, #7
 8002f40:	1ac3      	subs	r3, r0, r3
 8002f42:	d0d3      	beq.n	8002eec <_malloc_r+0x20>
 8002f44:	425a      	negs	r2, r3
 8002f46:	50e2      	str	r2, [r4, r3]
 8002f48:	e7d0      	b.n	8002eec <_malloc_r+0x20>
 8002f4a:	428c      	cmp	r4, r1
 8002f4c:	684b      	ldr	r3, [r1, #4]
 8002f4e:	bf16      	itet	ne
 8002f50:	6063      	strne	r3, [r4, #4]
 8002f52:	6013      	streq	r3, [r2, #0]
 8002f54:	460c      	movne	r4, r1
 8002f56:	e7eb      	b.n	8002f30 <_malloc_r+0x64>
 8002f58:	460c      	mov	r4, r1
 8002f5a:	6849      	ldr	r1, [r1, #4]
 8002f5c:	e7cc      	b.n	8002ef8 <_malloc_r+0x2c>
 8002f5e:	1cc4      	adds	r4, r0, #3
 8002f60:	f024 0403 	bic.w	r4, r4, #3
 8002f64:	42a0      	cmp	r0, r4
 8002f66:	d005      	beq.n	8002f74 <_malloc_r+0xa8>
 8002f68:	1a21      	subs	r1, r4, r0
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	f000 f898 	bl	80030a0 <_sbrk_r>
 8002f70:	3001      	adds	r0, #1
 8002f72:	d0cf      	beq.n	8002f14 <_malloc_r+0x48>
 8002f74:	6025      	str	r5, [r4, #0]
 8002f76:	e7db      	b.n	8002f30 <_malloc_r+0x64>
 8002f78:	20000090 	.word	0x20000090
 8002f7c:	20000094 	.word	0x20000094

08002f80 <iprintf>:
 8002f80:	b40f      	push	{r0, r1, r2, r3}
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <iprintf+0x2c>)
 8002f84:	b513      	push	{r0, r1, r4, lr}
 8002f86:	681c      	ldr	r4, [r3, #0]
 8002f88:	b124      	cbz	r4, 8002f94 <iprintf+0x14>
 8002f8a:	69a3      	ldr	r3, [r4, #24]
 8002f8c:	b913      	cbnz	r3, 8002f94 <iprintf+0x14>
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f000 fa46 	bl	8003420 <__sinit>
 8002f94:	ab05      	add	r3, sp, #20
 8002f96:	9a04      	ldr	r2, [sp, #16]
 8002f98:	68a1      	ldr	r1, [r4, #8]
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f000 fb59 	bl	8003654 <_vfiprintf_r>
 8002fa2:	b002      	add	sp, #8
 8002fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fa8:	b004      	add	sp, #16
 8002faa:	4770      	bx	lr
 8002fac:	2000000c 	.word	0x2000000c

08002fb0 <putchar>:
 8002fb0:	b538      	push	{r3, r4, r5, lr}
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <putchar+0x24>)
 8002fb4:	681c      	ldr	r4, [r3, #0]
 8002fb6:	4605      	mov	r5, r0
 8002fb8:	b124      	cbz	r4, 8002fc4 <putchar+0x14>
 8002fba:	69a3      	ldr	r3, [r4, #24]
 8002fbc:	b913      	cbnz	r3, 8002fc4 <putchar+0x14>
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f000 fa2e 	bl	8003420 <__sinit>
 8002fc4:	68a2      	ldr	r2, [r4, #8]
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	4620      	mov	r0, r4
 8002fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fce:	f000 bddf 	b.w	8003b90 <_putc_r>
 8002fd2:	bf00      	nop
 8002fd4:	2000000c 	.word	0x2000000c

08002fd8 <_puts_r>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	460e      	mov	r6, r1
 8002fdc:	4605      	mov	r5, r0
 8002fde:	b118      	cbz	r0, 8002fe8 <_puts_r+0x10>
 8002fe0:	6983      	ldr	r3, [r0, #24]
 8002fe2:	b90b      	cbnz	r3, 8002fe8 <_puts_r+0x10>
 8002fe4:	f000 fa1c 	bl	8003420 <__sinit>
 8002fe8:	69ab      	ldr	r3, [r5, #24]
 8002fea:	68ac      	ldr	r4, [r5, #8]
 8002fec:	b913      	cbnz	r3, 8002ff4 <_puts_r+0x1c>
 8002fee:	4628      	mov	r0, r5
 8002ff0:	f000 fa16 	bl	8003420 <__sinit>
 8002ff4:	4b23      	ldr	r3, [pc, #140]	; (8003084 <_puts_r+0xac>)
 8002ff6:	429c      	cmp	r4, r3
 8002ff8:	d117      	bne.n	800302a <_puts_r+0x52>
 8002ffa:	686c      	ldr	r4, [r5, #4]
 8002ffc:	89a3      	ldrh	r3, [r4, #12]
 8002ffe:	071b      	lsls	r3, r3, #28
 8003000:	d51d      	bpl.n	800303e <_puts_r+0x66>
 8003002:	6923      	ldr	r3, [r4, #16]
 8003004:	b1db      	cbz	r3, 800303e <_puts_r+0x66>
 8003006:	3e01      	subs	r6, #1
 8003008:	68a3      	ldr	r3, [r4, #8]
 800300a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800300e:	3b01      	subs	r3, #1
 8003010:	60a3      	str	r3, [r4, #8]
 8003012:	b9e9      	cbnz	r1, 8003050 <_puts_r+0x78>
 8003014:	2b00      	cmp	r3, #0
 8003016:	da2e      	bge.n	8003076 <_puts_r+0x9e>
 8003018:	4622      	mov	r2, r4
 800301a:	210a      	movs	r1, #10
 800301c:	4628      	mov	r0, r5
 800301e:	f000 f84f 	bl	80030c0 <__swbuf_r>
 8003022:	3001      	adds	r0, #1
 8003024:	d011      	beq.n	800304a <_puts_r+0x72>
 8003026:	200a      	movs	r0, #10
 8003028:	e011      	b.n	800304e <_puts_r+0x76>
 800302a:	4b17      	ldr	r3, [pc, #92]	; (8003088 <_puts_r+0xb0>)
 800302c:	429c      	cmp	r4, r3
 800302e:	d101      	bne.n	8003034 <_puts_r+0x5c>
 8003030:	68ac      	ldr	r4, [r5, #8]
 8003032:	e7e3      	b.n	8002ffc <_puts_r+0x24>
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <_puts_r+0xb4>)
 8003036:	429c      	cmp	r4, r3
 8003038:	bf08      	it	eq
 800303a:	68ec      	ldreq	r4, [r5, #12]
 800303c:	e7de      	b.n	8002ffc <_puts_r+0x24>
 800303e:	4621      	mov	r1, r4
 8003040:	4628      	mov	r0, r5
 8003042:	f000 f88f 	bl	8003164 <__swsetup_r>
 8003046:	2800      	cmp	r0, #0
 8003048:	d0dd      	beq.n	8003006 <_puts_r+0x2e>
 800304a:	f04f 30ff 	mov.w	r0, #4294967295
 800304e:	bd70      	pop	{r4, r5, r6, pc}
 8003050:	2b00      	cmp	r3, #0
 8003052:	da04      	bge.n	800305e <_puts_r+0x86>
 8003054:	69a2      	ldr	r2, [r4, #24]
 8003056:	429a      	cmp	r2, r3
 8003058:	dc06      	bgt.n	8003068 <_puts_r+0x90>
 800305a:	290a      	cmp	r1, #10
 800305c:	d004      	beq.n	8003068 <_puts_r+0x90>
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	6022      	str	r2, [r4, #0]
 8003064:	7019      	strb	r1, [r3, #0]
 8003066:	e7cf      	b.n	8003008 <_puts_r+0x30>
 8003068:	4622      	mov	r2, r4
 800306a:	4628      	mov	r0, r5
 800306c:	f000 f828 	bl	80030c0 <__swbuf_r>
 8003070:	3001      	adds	r0, #1
 8003072:	d1c9      	bne.n	8003008 <_puts_r+0x30>
 8003074:	e7e9      	b.n	800304a <_puts_r+0x72>
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	200a      	movs	r0, #10
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	6022      	str	r2, [r4, #0]
 800307e:	7018      	strb	r0, [r3, #0]
 8003080:	e7e5      	b.n	800304e <_puts_r+0x76>
 8003082:	bf00      	nop
 8003084:	080042bc 	.word	0x080042bc
 8003088:	080042dc 	.word	0x080042dc
 800308c:	0800429c 	.word	0x0800429c

08003090 <puts>:
 8003090:	4b02      	ldr	r3, [pc, #8]	; (800309c <puts+0xc>)
 8003092:	4601      	mov	r1, r0
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	f7ff bf9f 	b.w	8002fd8 <_puts_r>
 800309a:	bf00      	nop
 800309c:	2000000c 	.word	0x2000000c

080030a0 <_sbrk_r>:
 80030a0:	b538      	push	{r3, r4, r5, lr}
 80030a2:	4c06      	ldr	r4, [pc, #24]	; (80030bc <_sbrk_r+0x1c>)
 80030a4:	2300      	movs	r3, #0
 80030a6:	4605      	mov	r5, r0
 80030a8:	4608      	mov	r0, r1
 80030aa:	6023      	str	r3, [r4, #0]
 80030ac:	f7fe f92a 	bl	8001304 <_sbrk>
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	d102      	bne.n	80030ba <_sbrk_r+0x1a>
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	b103      	cbz	r3, 80030ba <_sbrk_r+0x1a>
 80030b8:	602b      	str	r3, [r5, #0]
 80030ba:	bd38      	pop	{r3, r4, r5, pc}
 80030bc:	200000dc 	.word	0x200000dc

080030c0 <__swbuf_r>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	460e      	mov	r6, r1
 80030c4:	4614      	mov	r4, r2
 80030c6:	4605      	mov	r5, r0
 80030c8:	b118      	cbz	r0, 80030d2 <__swbuf_r+0x12>
 80030ca:	6983      	ldr	r3, [r0, #24]
 80030cc:	b90b      	cbnz	r3, 80030d2 <__swbuf_r+0x12>
 80030ce:	f000 f9a7 	bl	8003420 <__sinit>
 80030d2:	4b21      	ldr	r3, [pc, #132]	; (8003158 <__swbuf_r+0x98>)
 80030d4:	429c      	cmp	r4, r3
 80030d6:	d12a      	bne.n	800312e <__swbuf_r+0x6e>
 80030d8:	686c      	ldr	r4, [r5, #4]
 80030da:	69a3      	ldr	r3, [r4, #24]
 80030dc:	60a3      	str	r3, [r4, #8]
 80030de:	89a3      	ldrh	r3, [r4, #12]
 80030e0:	071a      	lsls	r2, r3, #28
 80030e2:	d52e      	bpl.n	8003142 <__swbuf_r+0x82>
 80030e4:	6923      	ldr	r3, [r4, #16]
 80030e6:	b363      	cbz	r3, 8003142 <__swbuf_r+0x82>
 80030e8:	6923      	ldr	r3, [r4, #16]
 80030ea:	6820      	ldr	r0, [r4, #0]
 80030ec:	1ac0      	subs	r0, r0, r3
 80030ee:	6963      	ldr	r3, [r4, #20]
 80030f0:	b2f6      	uxtb	r6, r6
 80030f2:	4283      	cmp	r3, r0
 80030f4:	4637      	mov	r7, r6
 80030f6:	dc04      	bgt.n	8003102 <__swbuf_r+0x42>
 80030f8:	4621      	mov	r1, r4
 80030fa:	4628      	mov	r0, r5
 80030fc:	f000 f926 	bl	800334c <_fflush_r>
 8003100:	bb28      	cbnz	r0, 800314e <__swbuf_r+0x8e>
 8003102:	68a3      	ldr	r3, [r4, #8]
 8003104:	3b01      	subs	r3, #1
 8003106:	60a3      	str	r3, [r4, #8]
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	6022      	str	r2, [r4, #0]
 800310e:	701e      	strb	r6, [r3, #0]
 8003110:	6963      	ldr	r3, [r4, #20]
 8003112:	3001      	adds	r0, #1
 8003114:	4283      	cmp	r3, r0
 8003116:	d004      	beq.n	8003122 <__swbuf_r+0x62>
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	07db      	lsls	r3, r3, #31
 800311c:	d519      	bpl.n	8003152 <__swbuf_r+0x92>
 800311e:	2e0a      	cmp	r6, #10
 8003120:	d117      	bne.n	8003152 <__swbuf_r+0x92>
 8003122:	4621      	mov	r1, r4
 8003124:	4628      	mov	r0, r5
 8003126:	f000 f911 	bl	800334c <_fflush_r>
 800312a:	b190      	cbz	r0, 8003152 <__swbuf_r+0x92>
 800312c:	e00f      	b.n	800314e <__swbuf_r+0x8e>
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <__swbuf_r+0x9c>)
 8003130:	429c      	cmp	r4, r3
 8003132:	d101      	bne.n	8003138 <__swbuf_r+0x78>
 8003134:	68ac      	ldr	r4, [r5, #8]
 8003136:	e7d0      	b.n	80030da <__swbuf_r+0x1a>
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <__swbuf_r+0xa0>)
 800313a:	429c      	cmp	r4, r3
 800313c:	bf08      	it	eq
 800313e:	68ec      	ldreq	r4, [r5, #12]
 8003140:	e7cb      	b.n	80030da <__swbuf_r+0x1a>
 8003142:	4621      	mov	r1, r4
 8003144:	4628      	mov	r0, r5
 8003146:	f000 f80d 	bl	8003164 <__swsetup_r>
 800314a:	2800      	cmp	r0, #0
 800314c:	d0cc      	beq.n	80030e8 <__swbuf_r+0x28>
 800314e:	f04f 37ff 	mov.w	r7, #4294967295
 8003152:	4638      	mov	r0, r7
 8003154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003156:	bf00      	nop
 8003158:	080042bc 	.word	0x080042bc
 800315c:	080042dc 	.word	0x080042dc
 8003160:	0800429c 	.word	0x0800429c

08003164 <__swsetup_r>:
 8003164:	4b32      	ldr	r3, [pc, #200]	; (8003230 <__swsetup_r+0xcc>)
 8003166:	b570      	push	{r4, r5, r6, lr}
 8003168:	681d      	ldr	r5, [r3, #0]
 800316a:	4606      	mov	r6, r0
 800316c:	460c      	mov	r4, r1
 800316e:	b125      	cbz	r5, 800317a <__swsetup_r+0x16>
 8003170:	69ab      	ldr	r3, [r5, #24]
 8003172:	b913      	cbnz	r3, 800317a <__swsetup_r+0x16>
 8003174:	4628      	mov	r0, r5
 8003176:	f000 f953 	bl	8003420 <__sinit>
 800317a:	4b2e      	ldr	r3, [pc, #184]	; (8003234 <__swsetup_r+0xd0>)
 800317c:	429c      	cmp	r4, r3
 800317e:	d10f      	bne.n	80031a0 <__swsetup_r+0x3c>
 8003180:	686c      	ldr	r4, [r5, #4]
 8003182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003186:	b29a      	uxth	r2, r3
 8003188:	0715      	lsls	r5, r2, #28
 800318a:	d42c      	bmi.n	80031e6 <__swsetup_r+0x82>
 800318c:	06d0      	lsls	r0, r2, #27
 800318e:	d411      	bmi.n	80031b4 <__swsetup_r+0x50>
 8003190:	2209      	movs	r2, #9
 8003192:	6032      	str	r2, [r6, #0]
 8003194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003198:	81a3      	strh	r3, [r4, #12]
 800319a:	f04f 30ff 	mov.w	r0, #4294967295
 800319e:	e03e      	b.n	800321e <__swsetup_r+0xba>
 80031a0:	4b25      	ldr	r3, [pc, #148]	; (8003238 <__swsetup_r+0xd4>)
 80031a2:	429c      	cmp	r4, r3
 80031a4:	d101      	bne.n	80031aa <__swsetup_r+0x46>
 80031a6:	68ac      	ldr	r4, [r5, #8]
 80031a8:	e7eb      	b.n	8003182 <__swsetup_r+0x1e>
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <__swsetup_r+0xd8>)
 80031ac:	429c      	cmp	r4, r3
 80031ae:	bf08      	it	eq
 80031b0:	68ec      	ldreq	r4, [r5, #12]
 80031b2:	e7e6      	b.n	8003182 <__swsetup_r+0x1e>
 80031b4:	0751      	lsls	r1, r2, #29
 80031b6:	d512      	bpl.n	80031de <__swsetup_r+0x7a>
 80031b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031ba:	b141      	cbz	r1, 80031ce <__swsetup_r+0x6a>
 80031bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031c0:	4299      	cmp	r1, r3
 80031c2:	d002      	beq.n	80031ca <__swsetup_r+0x66>
 80031c4:	4630      	mov	r0, r6
 80031c6:	f7ff fe33 	bl	8002e30 <_free_r>
 80031ca:	2300      	movs	r3, #0
 80031cc:	6363      	str	r3, [r4, #52]	; 0x34
 80031ce:	89a3      	ldrh	r3, [r4, #12]
 80031d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031d4:	81a3      	strh	r3, [r4, #12]
 80031d6:	2300      	movs	r3, #0
 80031d8:	6063      	str	r3, [r4, #4]
 80031da:	6923      	ldr	r3, [r4, #16]
 80031dc:	6023      	str	r3, [r4, #0]
 80031de:	89a3      	ldrh	r3, [r4, #12]
 80031e0:	f043 0308 	orr.w	r3, r3, #8
 80031e4:	81a3      	strh	r3, [r4, #12]
 80031e6:	6923      	ldr	r3, [r4, #16]
 80031e8:	b94b      	cbnz	r3, 80031fe <__swsetup_r+0x9a>
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f4:	d003      	beq.n	80031fe <__swsetup_r+0x9a>
 80031f6:	4621      	mov	r1, r4
 80031f8:	4630      	mov	r0, r6
 80031fa:	f000 f9bf 	bl	800357c <__smakebuf_r>
 80031fe:	89a2      	ldrh	r2, [r4, #12]
 8003200:	f012 0301 	ands.w	r3, r2, #1
 8003204:	d00c      	beq.n	8003220 <__swsetup_r+0xbc>
 8003206:	2300      	movs	r3, #0
 8003208:	60a3      	str	r3, [r4, #8]
 800320a:	6963      	ldr	r3, [r4, #20]
 800320c:	425b      	negs	r3, r3
 800320e:	61a3      	str	r3, [r4, #24]
 8003210:	6923      	ldr	r3, [r4, #16]
 8003212:	b953      	cbnz	r3, 800322a <__swsetup_r+0xc6>
 8003214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003218:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800321c:	d1ba      	bne.n	8003194 <__swsetup_r+0x30>
 800321e:	bd70      	pop	{r4, r5, r6, pc}
 8003220:	0792      	lsls	r2, r2, #30
 8003222:	bf58      	it	pl
 8003224:	6963      	ldrpl	r3, [r4, #20]
 8003226:	60a3      	str	r3, [r4, #8]
 8003228:	e7f2      	b.n	8003210 <__swsetup_r+0xac>
 800322a:	2000      	movs	r0, #0
 800322c:	e7f7      	b.n	800321e <__swsetup_r+0xba>
 800322e:	bf00      	nop
 8003230:	2000000c 	.word	0x2000000c
 8003234:	080042bc 	.word	0x080042bc
 8003238:	080042dc 	.word	0x080042dc
 800323c:	0800429c 	.word	0x0800429c

08003240 <__sflush_r>:
 8003240:	898a      	ldrh	r2, [r1, #12]
 8003242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003246:	4605      	mov	r5, r0
 8003248:	0710      	lsls	r0, r2, #28
 800324a:	460c      	mov	r4, r1
 800324c:	d458      	bmi.n	8003300 <__sflush_r+0xc0>
 800324e:	684b      	ldr	r3, [r1, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	dc05      	bgt.n	8003260 <__sflush_r+0x20>
 8003254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	dc02      	bgt.n	8003260 <__sflush_r+0x20>
 800325a:	2000      	movs	r0, #0
 800325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003262:	2e00      	cmp	r6, #0
 8003264:	d0f9      	beq.n	800325a <__sflush_r+0x1a>
 8003266:	2300      	movs	r3, #0
 8003268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800326c:	682f      	ldr	r7, [r5, #0]
 800326e:	6a21      	ldr	r1, [r4, #32]
 8003270:	602b      	str	r3, [r5, #0]
 8003272:	d032      	beq.n	80032da <__sflush_r+0x9a>
 8003274:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	075a      	lsls	r2, r3, #29
 800327a:	d505      	bpl.n	8003288 <__sflush_r+0x48>
 800327c:	6863      	ldr	r3, [r4, #4]
 800327e:	1ac0      	subs	r0, r0, r3
 8003280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003282:	b10b      	cbz	r3, 8003288 <__sflush_r+0x48>
 8003284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003286:	1ac0      	subs	r0, r0, r3
 8003288:	2300      	movs	r3, #0
 800328a:	4602      	mov	r2, r0
 800328c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800328e:	6a21      	ldr	r1, [r4, #32]
 8003290:	4628      	mov	r0, r5
 8003292:	47b0      	blx	r6
 8003294:	1c43      	adds	r3, r0, #1
 8003296:	89a3      	ldrh	r3, [r4, #12]
 8003298:	d106      	bne.n	80032a8 <__sflush_r+0x68>
 800329a:	6829      	ldr	r1, [r5, #0]
 800329c:	291d      	cmp	r1, #29
 800329e:	d848      	bhi.n	8003332 <__sflush_r+0xf2>
 80032a0:	4a29      	ldr	r2, [pc, #164]	; (8003348 <__sflush_r+0x108>)
 80032a2:	40ca      	lsrs	r2, r1
 80032a4:	07d6      	lsls	r6, r2, #31
 80032a6:	d544      	bpl.n	8003332 <__sflush_r+0xf2>
 80032a8:	2200      	movs	r2, #0
 80032aa:	6062      	str	r2, [r4, #4]
 80032ac:	04d9      	lsls	r1, r3, #19
 80032ae:	6922      	ldr	r2, [r4, #16]
 80032b0:	6022      	str	r2, [r4, #0]
 80032b2:	d504      	bpl.n	80032be <__sflush_r+0x7e>
 80032b4:	1c42      	adds	r2, r0, #1
 80032b6:	d101      	bne.n	80032bc <__sflush_r+0x7c>
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	b903      	cbnz	r3, 80032be <__sflush_r+0x7e>
 80032bc:	6560      	str	r0, [r4, #84]	; 0x54
 80032be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032c0:	602f      	str	r7, [r5, #0]
 80032c2:	2900      	cmp	r1, #0
 80032c4:	d0c9      	beq.n	800325a <__sflush_r+0x1a>
 80032c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032ca:	4299      	cmp	r1, r3
 80032cc:	d002      	beq.n	80032d4 <__sflush_r+0x94>
 80032ce:	4628      	mov	r0, r5
 80032d0:	f7ff fdae 	bl	8002e30 <_free_r>
 80032d4:	2000      	movs	r0, #0
 80032d6:	6360      	str	r0, [r4, #52]	; 0x34
 80032d8:	e7c0      	b.n	800325c <__sflush_r+0x1c>
 80032da:	2301      	movs	r3, #1
 80032dc:	4628      	mov	r0, r5
 80032de:	47b0      	blx	r6
 80032e0:	1c41      	adds	r1, r0, #1
 80032e2:	d1c8      	bne.n	8003276 <__sflush_r+0x36>
 80032e4:	682b      	ldr	r3, [r5, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0c5      	beq.n	8003276 <__sflush_r+0x36>
 80032ea:	2b1d      	cmp	r3, #29
 80032ec:	d001      	beq.n	80032f2 <__sflush_r+0xb2>
 80032ee:	2b16      	cmp	r3, #22
 80032f0:	d101      	bne.n	80032f6 <__sflush_r+0xb6>
 80032f2:	602f      	str	r7, [r5, #0]
 80032f4:	e7b1      	b.n	800325a <__sflush_r+0x1a>
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032fc:	81a3      	strh	r3, [r4, #12]
 80032fe:	e7ad      	b.n	800325c <__sflush_r+0x1c>
 8003300:	690f      	ldr	r7, [r1, #16]
 8003302:	2f00      	cmp	r7, #0
 8003304:	d0a9      	beq.n	800325a <__sflush_r+0x1a>
 8003306:	0793      	lsls	r3, r2, #30
 8003308:	680e      	ldr	r6, [r1, #0]
 800330a:	bf08      	it	eq
 800330c:	694b      	ldreq	r3, [r1, #20]
 800330e:	600f      	str	r7, [r1, #0]
 8003310:	bf18      	it	ne
 8003312:	2300      	movne	r3, #0
 8003314:	eba6 0807 	sub.w	r8, r6, r7
 8003318:	608b      	str	r3, [r1, #8]
 800331a:	f1b8 0f00 	cmp.w	r8, #0
 800331e:	dd9c      	ble.n	800325a <__sflush_r+0x1a>
 8003320:	4643      	mov	r3, r8
 8003322:	463a      	mov	r2, r7
 8003324:	6a21      	ldr	r1, [r4, #32]
 8003326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003328:	4628      	mov	r0, r5
 800332a:	47b0      	blx	r6
 800332c:	2800      	cmp	r0, #0
 800332e:	dc06      	bgt.n	800333e <__sflush_r+0xfe>
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003336:	81a3      	strh	r3, [r4, #12]
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	e78e      	b.n	800325c <__sflush_r+0x1c>
 800333e:	4407      	add	r7, r0
 8003340:	eba8 0800 	sub.w	r8, r8, r0
 8003344:	e7e9      	b.n	800331a <__sflush_r+0xda>
 8003346:	bf00      	nop
 8003348:	20400001 	.word	0x20400001

0800334c <_fflush_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	690b      	ldr	r3, [r1, #16]
 8003350:	4605      	mov	r5, r0
 8003352:	460c      	mov	r4, r1
 8003354:	b1db      	cbz	r3, 800338e <_fflush_r+0x42>
 8003356:	b118      	cbz	r0, 8003360 <_fflush_r+0x14>
 8003358:	6983      	ldr	r3, [r0, #24]
 800335a:	b90b      	cbnz	r3, 8003360 <_fflush_r+0x14>
 800335c:	f000 f860 	bl	8003420 <__sinit>
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <_fflush_r+0x48>)
 8003362:	429c      	cmp	r4, r3
 8003364:	d109      	bne.n	800337a <_fflush_r+0x2e>
 8003366:	686c      	ldr	r4, [r5, #4]
 8003368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800336c:	b17b      	cbz	r3, 800338e <_fflush_r+0x42>
 800336e:	4621      	mov	r1, r4
 8003370:	4628      	mov	r0, r5
 8003372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003376:	f7ff bf63 	b.w	8003240 <__sflush_r>
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <_fflush_r+0x4c>)
 800337c:	429c      	cmp	r4, r3
 800337e:	d101      	bne.n	8003384 <_fflush_r+0x38>
 8003380:	68ac      	ldr	r4, [r5, #8]
 8003382:	e7f1      	b.n	8003368 <_fflush_r+0x1c>
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <_fflush_r+0x50>)
 8003386:	429c      	cmp	r4, r3
 8003388:	bf08      	it	eq
 800338a:	68ec      	ldreq	r4, [r5, #12]
 800338c:	e7ec      	b.n	8003368 <_fflush_r+0x1c>
 800338e:	2000      	movs	r0, #0
 8003390:	bd38      	pop	{r3, r4, r5, pc}
 8003392:	bf00      	nop
 8003394:	080042bc 	.word	0x080042bc
 8003398:	080042dc 	.word	0x080042dc
 800339c:	0800429c 	.word	0x0800429c

080033a0 <std>:
 80033a0:	2300      	movs	r3, #0
 80033a2:	b510      	push	{r4, lr}
 80033a4:	4604      	mov	r4, r0
 80033a6:	e9c0 3300 	strd	r3, r3, [r0]
 80033aa:	6083      	str	r3, [r0, #8]
 80033ac:	8181      	strh	r1, [r0, #12]
 80033ae:	6643      	str	r3, [r0, #100]	; 0x64
 80033b0:	81c2      	strh	r2, [r0, #14]
 80033b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033b6:	6183      	str	r3, [r0, #24]
 80033b8:	4619      	mov	r1, r3
 80033ba:	2208      	movs	r2, #8
 80033bc:	305c      	adds	r0, #92	; 0x5c
 80033be:	f7ff fd2f 	bl	8002e20 <memset>
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <std+0x38>)
 80033c4:	6263      	str	r3, [r4, #36]	; 0x24
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <std+0x3c>)
 80033c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <std+0x40>)
 80033cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <std+0x44>)
 80033d0:	6224      	str	r4, [r4, #32]
 80033d2:	6323      	str	r3, [r4, #48]	; 0x30
 80033d4:	bd10      	pop	{r4, pc}
 80033d6:	bf00      	nop
 80033d8:	08003bfd 	.word	0x08003bfd
 80033dc:	08003c1f 	.word	0x08003c1f
 80033e0:	08003c57 	.word	0x08003c57
 80033e4:	08003c7b 	.word	0x08003c7b

080033e8 <_cleanup_r>:
 80033e8:	4901      	ldr	r1, [pc, #4]	; (80033f0 <_cleanup_r+0x8>)
 80033ea:	f000 b885 	b.w	80034f8 <_fwalk_reent>
 80033ee:	bf00      	nop
 80033f0:	0800334d 	.word	0x0800334d

080033f4 <__sfmoreglue>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	1e4a      	subs	r2, r1, #1
 80033f8:	2568      	movs	r5, #104	; 0x68
 80033fa:	4355      	muls	r5, r2
 80033fc:	460e      	mov	r6, r1
 80033fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003402:	f7ff fd63 	bl	8002ecc <_malloc_r>
 8003406:	4604      	mov	r4, r0
 8003408:	b140      	cbz	r0, 800341c <__sfmoreglue+0x28>
 800340a:	2100      	movs	r1, #0
 800340c:	e9c0 1600 	strd	r1, r6, [r0]
 8003410:	300c      	adds	r0, #12
 8003412:	60a0      	str	r0, [r4, #8]
 8003414:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003418:	f7ff fd02 	bl	8002e20 <memset>
 800341c:	4620      	mov	r0, r4
 800341e:	bd70      	pop	{r4, r5, r6, pc}

08003420 <__sinit>:
 8003420:	6983      	ldr	r3, [r0, #24]
 8003422:	b510      	push	{r4, lr}
 8003424:	4604      	mov	r4, r0
 8003426:	bb33      	cbnz	r3, 8003476 <__sinit+0x56>
 8003428:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800342c:	6503      	str	r3, [r0, #80]	; 0x50
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <__sinit+0x58>)
 8003430:	4a12      	ldr	r2, [pc, #72]	; (800347c <__sinit+0x5c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6282      	str	r2, [r0, #40]	; 0x28
 8003436:	4298      	cmp	r0, r3
 8003438:	bf04      	itt	eq
 800343a:	2301      	moveq	r3, #1
 800343c:	6183      	streq	r3, [r0, #24]
 800343e:	f000 f81f 	bl	8003480 <__sfp>
 8003442:	6060      	str	r0, [r4, #4]
 8003444:	4620      	mov	r0, r4
 8003446:	f000 f81b 	bl	8003480 <__sfp>
 800344a:	60a0      	str	r0, [r4, #8]
 800344c:	4620      	mov	r0, r4
 800344e:	f000 f817 	bl	8003480 <__sfp>
 8003452:	2200      	movs	r2, #0
 8003454:	60e0      	str	r0, [r4, #12]
 8003456:	2104      	movs	r1, #4
 8003458:	6860      	ldr	r0, [r4, #4]
 800345a:	f7ff ffa1 	bl	80033a0 <std>
 800345e:	2201      	movs	r2, #1
 8003460:	2109      	movs	r1, #9
 8003462:	68a0      	ldr	r0, [r4, #8]
 8003464:	f7ff ff9c 	bl	80033a0 <std>
 8003468:	2202      	movs	r2, #2
 800346a:	2112      	movs	r1, #18
 800346c:	68e0      	ldr	r0, [r4, #12]
 800346e:	f7ff ff97 	bl	80033a0 <std>
 8003472:	2301      	movs	r3, #1
 8003474:	61a3      	str	r3, [r4, #24]
 8003476:	bd10      	pop	{r4, pc}
 8003478:	08004298 	.word	0x08004298
 800347c:	080033e9 	.word	0x080033e9

08003480 <__sfp>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <__sfp+0x70>)
 8003484:	681e      	ldr	r6, [r3, #0]
 8003486:	69b3      	ldr	r3, [r6, #24]
 8003488:	4607      	mov	r7, r0
 800348a:	b913      	cbnz	r3, 8003492 <__sfp+0x12>
 800348c:	4630      	mov	r0, r6
 800348e:	f7ff ffc7 	bl	8003420 <__sinit>
 8003492:	3648      	adds	r6, #72	; 0x48
 8003494:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003498:	3b01      	subs	r3, #1
 800349a:	d503      	bpl.n	80034a4 <__sfp+0x24>
 800349c:	6833      	ldr	r3, [r6, #0]
 800349e:	b133      	cbz	r3, 80034ae <__sfp+0x2e>
 80034a0:	6836      	ldr	r6, [r6, #0]
 80034a2:	e7f7      	b.n	8003494 <__sfp+0x14>
 80034a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034a8:	b16d      	cbz	r5, 80034c6 <__sfp+0x46>
 80034aa:	3468      	adds	r4, #104	; 0x68
 80034ac:	e7f4      	b.n	8003498 <__sfp+0x18>
 80034ae:	2104      	movs	r1, #4
 80034b0:	4638      	mov	r0, r7
 80034b2:	f7ff ff9f 	bl	80033f4 <__sfmoreglue>
 80034b6:	6030      	str	r0, [r6, #0]
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1f1      	bne.n	80034a0 <__sfp+0x20>
 80034bc:	230c      	movs	r3, #12
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	4604      	mov	r4, r0
 80034c2:	4620      	mov	r0, r4
 80034c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <__sfp+0x74>)
 80034c8:	6665      	str	r5, [r4, #100]	; 0x64
 80034ca:	e9c4 5500 	strd	r5, r5, [r4]
 80034ce:	60a5      	str	r5, [r4, #8]
 80034d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80034d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80034d8:	2208      	movs	r2, #8
 80034da:	4629      	mov	r1, r5
 80034dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034e0:	f7ff fc9e 	bl	8002e20 <memset>
 80034e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034ec:	e7e9      	b.n	80034c2 <__sfp+0x42>
 80034ee:	bf00      	nop
 80034f0:	08004298 	.word	0x08004298
 80034f4:	ffff0001 	.word	0xffff0001

080034f8 <_fwalk_reent>:
 80034f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034fc:	4680      	mov	r8, r0
 80034fe:	4689      	mov	r9, r1
 8003500:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003504:	2600      	movs	r6, #0
 8003506:	b914      	cbnz	r4, 800350e <_fwalk_reent+0x16>
 8003508:	4630      	mov	r0, r6
 800350a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800350e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003512:	3f01      	subs	r7, #1
 8003514:	d501      	bpl.n	800351a <_fwalk_reent+0x22>
 8003516:	6824      	ldr	r4, [r4, #0]
 8003518:	e7f5      	b.n	8003506 <_fwalk_reent+0xe>
 800351a:	89ab      	ldrh	r3, [r5, #12]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d907      	bls.n	8003530 <_fwalk_reent+0x38>
 8003520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003524:	3301      	adds	r3, #1
 8003526:	d003      	beq.n	8003530 <_fwalk_reent+0x38>
 8003528:	4629      	mov	r1, r5
 800352a:	4640      	mov	r0, r8
 800352c:	47c8      	blx	r9
 800352e:	4306      	orrs	r6, r0
 8003530:	3568      	adds	r5, #104	; 0x68
 8003532:	e7ee      	b.n	8003512 <_fwalk_reent+0x1a>

08003534 <__swhatbuf_r>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	460e      	mov	r6, r1
 8003538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800353c:	2900      	cmp	r1, #0
 800353e:	b096      	sub	sp, #88	; 0x58
 8003540:	4614      	mov	r4, r2
 8003542:	461d      	mov	r5, r3
 8003544:	da07      	bge.n	8003556 <__swhatbuf_r+0x22>
 8003546:	2300      	movs	r3, #0
 8003548:	602b      	str	r3, [r5, #0]
 800354a:	89b3      	ldrh	r3, [r6, #12]
 800354c:	061a      	lsls	r2, r3, #24
 800354e:	d410      	bmi.n	8003572 <__swhatbuf_r+0x3e>
 8003550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003554:	e00e      	b.n	8003574 <__swhatbuf_r+0x40>
 8003556:	466a      	mov	r2, sp
 8003558:	f000 fbb6 	bl	8003cc8 <_fstat_r>
 800355c:	2800      	cmp	r0, #0
 800355e:	dbf2      	blt.n	8003546 <__swhatbuf_r+0x12>
 8003560:	9a01      	ldr	r2, [sp, #4]
 8003562:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003566:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800356a:	425a      	negs	r2, r3
 800356c:	415a      	adcs	r2, r3
 800356e:	602a      	str	r2, [r5, #0]
 8003570:	e7ee      	b.n	8003550 <__swhatbuf_r+0x1c>
 8003572:	2340      	movs	r3, #64	; 0x40
 8003574:	2000      	movs	r0, #0
 8003576:	6023      	str	r3, [r4, #0]
 8003578:	b016      	add	sp, #88	; 0x58
 800357a:	bd70      	pop	{r4, r5, r6, pc}

0800357c <__smakebuf_r>:
 800357c:	898b      	ldrh	r3, [r1, #12]
 800357e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003580:	079d      	lsls	r5, r3, #30
 8003582:	4606      	mov	r6, r0
 8003584:	460c      	mov	r4, r1
 8003586:	d507      	bpl.n	8003598 <__smakebuf_r+0x1c>
 8003588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	6123      	str	r3, [r4, #16]
 8003590:	2301      	movs	r3, #1
 8003592:	6163      	str	r3, [r4, #20]
 8003594:	b002      	add	sp, #8
 8003596:	bd70      	pop	{r4, r5, r6, pc}
 8003598:	ab01      	add	r3, sp, #4
 800359a:	466a      	mov	r2, sp
 800359c:	f7ff ffca 	bl	8003534 <__swhatbuf_r>
 80035a0:	9900      	ldr	r1, [sp, #0]
 80035a2:	4605      	mov	r5, r0
 80035a4:	4630      	mov	r0, r6
 80035a6:	f7ff fc91 	bl	8002ecc <_malloc_r>
 80035aa:	b948      	cbnz	r0, 80035c0 <__smakebuf_r+0x44>
 80035ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035b0:	059a      	lsls	r2, r3, #22
 80035b2:	d4ef      	bmi.n	8003594 <__smakebuf_r+0x18>
 80035b4:	f023 0303 	bic.w	r3, r3, #3
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	81a3      	strh	r3, [r4, #12]
 80035be:	e7e3      	b.n	8003588 <__smakebuf_r+0xc>
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <__smakebuf_r+0x7c>)
 80035c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	6020      	str	r0, [r4, #0]
 80035c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035cc:	81a3      	strh	r3, [r4, #12]
 80035ce:	9b00      	ldr	r3, [sp, #0]
 80035d0:	6163      	str	r3, [r4, #20]
 80035d2:	9b01      	ldr	r3, [sp, #4]
 80035d4:	6120      	str	r0, [r4, #16]
 80035d6:	b15b      	cbz	r3, 80035f0 <__smakebuf_r+0x74>
 80035d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035dc:	4630      	mov	r0, r6
 80035de:	f000 fb85 	bl	8003cec <_isatty_r>
 80035e2:	b128      	cbz	r0, 80035f0 <__smakebuf_r+0x74>
 80035e4:	89a3      	ldrh	r3, [r4, #12]
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	81a3      	strh	r3, [r4, #12]
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	431d      	orrs	r5, r3
 80035f4:	81a5      	strh	r5, [r4, #12]
 80035f6:	e7cd      	b.n	8003594 <__smakebuf_r+0x18>
 80035f8:	080033e9 	.word	0x080033e9

080035fc <__malloc_lock>:
 80035fc:	4770      	bx	lr

080035fe <__malloc_unlock>:
 80035fe:	4770      	bx	lr

08003600 <__sfputc_r>:
 8003600:	6893      	ldr	r3, [r2, #8]
 8003602:	3b01      	subs	r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	b410      	push	{r4}
 8003608:	6093      	str	r3, [r2, #8]
 800360a:	da08      	bge.n	800361e <__sfputc_r+0x1e>
 800360c:	6994      	ldr	r4, [r2, #24]
 800360e:	42a3      	cmp	r3, r4
 8003610:	db01      	blt.n	8003616 <__sfputc_r+0x16>
 8003612:	290a      	cmp	r1, #10
 8003614:	d103      	bne.n	800361e <__sfputc_r+0x1e>
 8003616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800361a:	f7ff bd51 	b.w	80030c0 <__swbuf_r>
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	1c58      	adds	r0, r3, #1
 8003622:	6010      	str	r0, [r2, #0]
 8003624:	7019      	strb	r1, [r3, #0]
 8003626:	4608      	mov	r0, r1
 8003628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800362c:	4770      	bx	lr

0800362e <__sfputs_r>:
 800362e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003630:	4606      	mov	r6, r0
 8003632:	460f      	mov	r7, r1
 8003634:	4614      	mov	r4, r2
 8003636:	18d5      	adds	r5, r2, r3
 8003638:	42ac      	cmp	r4, r5
 800363a:	d101      	bne.n	8003640 <__sfputs_r+0x12>
 800363c:	2000      	movs	r0, #0
 800363e:	e007      	b.n	8003650 <__sfputs_r+0x22>
 8003640:	463a      	mov	r2, r7
 8003642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003646:	4630      	mov	r0, r6
 8003648:	f7ff ffda 	bl	8003600 <__sfputc_r>
 800364c:	1c43      	adds	r3, r0, #1
 800364e:	d1f3      	bne.n	8003638 <__sfputs_r+0xa>
 8003650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003654 <_vfiprintf_r>:
 8003654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003658:	460c      	mov	r4, r1
 800365a:	b09d      	sub	sp, #116	; 0x74
 800365c:	4617      	mov	r7, r2
 800365e:	461d      	mov	r5, r3
 8003660:	4606      	mov	r6, r0
 8003662:	b118      	cbz	r0, 800366c <_vfiprintf_r+0x18>
 8003664:	6983      	ldr	r3, [r0, #24]
 8003666:	b90b      	cbnz	r3, 800366c <_vfiprintf_r+0x18>
 8003668:	f7ff feda 	bl	8003420 <__sinit>
 800366c:	4b7c      	ldr	r3, [pc, #496]	; (8003860 <_vfiprintf_r+0x20c>)
 800366e:	429c      	cmp	r4, r3
 8003670:	d158      	bne.n	8003724 <_vfiprintf_r+0xd0>
 8003672:	6874      	ldr	r4, [r6, #4]
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	0718      	lsls	r0, r3, #28
 8003678:	d55e      	bpl.n	8003738 <_vfiprintf_r+0xe4>
 800367a:	6923      	ldr	r3, [r4, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d05b      	beq.n	8003738 <_vfiprintf_r+0xe4>
 8003680:	2300      	movs	r3, #0
 8003682:	9309      	str	r3, [sp, #36]	; 0x24
 8003684:	2320      	movs	r3, #32
 8003686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800368a:	2330      	movs	r3, #48	; 0x30
 800368c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003690:	9503      	str	r5, [sp, #12]
 8003692:	f04f 0b01 	mov.w	fp, #1
 8003696:	46b8      	mov	r8, r7
 8003698:	4645      	mov	r5, r8
 800369a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800369e:	b10b      	cbz	r3, 80036a4 <_vfiprintf_r+0x50>
 80036a0:	2b25      	cmp	r3, #37	; 0x25
 80036a2:	d154      	bne.n	800374e <_vfiprintf_r+0xfa>
 80036a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80036a8:	d00b      	beq.n	80036c2 <_vfiprintf_r+0x6e>
 80036aa:	4653      	mov	r3, sl
 80036ac:	463a      	mov	r2, r7
 80036ae:	4621      	mov	r1, r4
 80036b0:	4630      	mov	r0, r6
 80036b2:	f7ff ffbc 	bl	800362e <__sfputs_r>
 80036b6:	3001      	adds	r0, #1
 80036b8:	f000 80c2 	beq.w	8003840 <_vfiprintf_r+0x1ec>
 80036bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036be:	4453      	add	r3, sl
 80036c0:	9309      	str	r3, [sp, #36]	; 0x24
 80036c2:	f898 3000 	ldrb.w	r3, [r8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80ba 	beq.w	8003840 <_vfiprintf_r+0x1ec>
 80036cc:	2300      	movs	r3, #0
 80036ce:	f04f 32ff 	mov.w	r2, #4294967295
 80036d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036d6:	9304      	str	r3, [sp, #16]
 80036d8:	9307      	str	r3, [sp, #28]
 80036da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036de:	931a      	str	r3, [sp, #104]	; 0x68
 80036e0:	46a8      	mov	r8, r5
 80036e2:	2205      	movs	r2, #5
 80036e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80036e8:	485e      	ldr	r0, [pc, #376]	; (8003864 <_vfiprintf_r+0x210>)
 80036ea:	f7fc fd99 	bl	8000220 <memchr>
 80036ee:	9b04      	ldr	r3, [sp, #16]
 80036f0:	bb78      	cbnz	r0, 8003752 <_vfiprintf_r+0xfe>
 80036f2:	06d9      	lsls	r1, r3, #27
 80036f4:	bf44      	itt	mi
 80036f6:	2220      	movmi	r2, #32
 80036f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036fc:	071a      	lsls	r2, r3, #28
 80036fe:	bf44      	itt	mi
 8003700:	222b      	movmi	r2, #43	; 0x2b
 8003702:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003706:	782a      	ldrb	r2, [r5, #0]
 8003708:	2a2a      	cmp	r2, #42	; 0x2a
 800370a:	d02a      	beq.n	8003762 <_vfiprintf_r+0x10e>
 800370c:	9a07      	ldr	r2, [sp, #28]
 800370e:	46a8      	mov	r8, r5
 8003710:	2000      	movs	r0, #0
 8003712:	250a      	movs	r5, #10
 8003714:	4641      	mov	r1, r8
 8003716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800371a:	3b30      	subs	r3, #48	; 0x30
 800371c:	2b09      	cmp	r3, #9
 800371e:	d969      	bls.n	80037f4 <_vfiprintf_r+0x1a0>
 8003720:	b360      	cbz	r0, 800377c <_vfiprintf_r+0x128>
 8003722:	e024      	b.n	800376e <_vfiprintf_r+0x11a>
 8003724:	4b50      	ldr	r3, [pc, #320]	; (8003868 <_vfiprintf_r+0x214>)
 8003726:	429c      	cmp	r4, r3
 8003728:	d101      	bne.n	800372e <_vfiprintf_r+0xda>
 800372a:	68b4      	ldr	r4, [r6, #8]
 800372c:	e7a2      	b.n	8003674 <_vfiprintf_r+0x20>
 800372e:	4b4f      	ldr	r3, [pc, #316]	; (800386c <_vfiprintf_r+0x218>)
 8003730:	429c      	cmp	r4, r3
 8003732:	bf08      	it	eq
 8003734:	68f4      	ldreq	r4, [r6, #12]
 8003736:	e79d      	b.n	8003674 <_vfiprintf_r+0x20>
 8003738:	4621      	mov	r1, r4
 800373a:	4630      	mov	r0, r6
 800373c:	f7ff fd12 	bl	8003164 <__swsetup_r>
 8003740:	2800      	cmp	r0, #0
 8003742:	d09d      	beq.n	8003680 <_vfiprintf_r+0x2c>
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	b01d      	add	sp, #116	; 0x74
 800374a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374e:	46a8      	mov	r8, r5
 8003750:	e7a2      	b.n	8003698 <_vfiprintf_r+0x44>
 8003752:	4a44      	ldr	r2, [pc, #272]	; (8003864 <_vfiprintf_r+0x210>)
 8003754:	1a80      	subs	r0, r0, r2
 8003756:	fa0b f000 	lsl.w	r0, fp, r0
 800375a:	4318      	orrs	r0, r3
 800375c:	9004      	str	r0, [sp, #16]
 800375e:	4645      	mov	r5, r8
 8003760:	e7be      	b.n	80036e0 <_vfiprintf_r+0x8c>
 8003762:	9a03      	ldr	r2, [sp, #12]
 8003764:	1d11      	adds	r1, r2, #4
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	9103      	str	r1, [sp, #12]
 800376a:	2a00      	cmp	r2, #0
 800376c:	db01      	blt.n	8003772 <_vfiprintf_r+0x11e>
 800376e:	9207      	str	r2, [sp, #28]
 8003770:	e004      	b.n	800377c <_vfiprintf_r+0x128>
 8003772:	4252      	negs	r2, r2
 8003774:	f043 0302 	orr.w	r3, r3, #2
 8003778:	9207      	str	r2, [sp, #28]
 800377a:	9304      	str	r3, [sp, #16]
 800377c:	f898 3000 	ldrb.w	r3, [r8]
 8003780:	2b2e      	cmp	r3, #46	; 0x2e
 8003782:	d10e      	bne.n	80037a2 <_vfiprintf_r+0x14e>
 8003784:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003788:	2b2a      	cmp	r3, #42	; 0x2a
 800378a:	d138      	bne.n	80037fe <_vfiprintf_r+0x1aa>
 800378c:	9b03      	ldr	r3, [sp, #12]
 800378e:	1d1a      	adds	r2, r3, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	9203      	str	r2, [sp, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	bfb8      	it	lt
 8003798:	f04f 33ff 	movlt.w	r3, #4294967295
 800379c:	f108 0802 	add.w	r8, r8, #2
 80037a0:	9305      	str	r3, [sp, #20]
 80037a2:	4d33      	ldr	r5, [pc, #204]	; (8003870 <_vfiprintf_r+0x21c>)
 80037a4:	f898 1000 	ldrb.w	r1, [r8]
 80037a8:	2203      	movs	r2, #3
 80037aa:	4628      	mov	r0, r5
 80037ac:	f7fc fd38 	bl	8000220 <memchr>
 80037b0:	b140      	cbz	r0, 80037c4 <_vfiprintf_r+0x170>
 80037b2:	2340      	movs	r3, #64	; 0x40
 80037b4:	1b40      	subs	r0, r0, r5
 80037b6:	fa03 f000 	lsl.w	r0, r3, r0
 80037ba:	9b04      	ldr	r3, [sp, #16]
 80037bc:	4303      	orrs	r3, r0
 80037be:	f108 0801 	add.w	r8, r8, #1
 80037c2:	9304      	str	r3, [sp, #16]
 80037c4:	f898 1000 	ldrb.w	r1, [r8]
 80037c8:	482a      	ldr	r0, [pc, #168]	; (8003874 <_vfiprintf_r+0x220>)
 80037ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037ce:	2206      	movs	r2, #6
 80037d0:	f108 0701 	add.w	r7, r8, #1
 80037d4:	f7fc fd24 	bl	8000220 <memchr>
 80037d8:	2800      	cmp	r0, #0
 80037da:	d037      	beq.n	800384c <_vfiprintf_r+0x1f8>
 80037dc:	4b26      	ldr	r3, [pc, #152]	; (8003878 <_vfiprintf_r+0x224>)
 80037de:	bb1b      	cbnz	r3, 8003828 <_vfiprintf_r+0x1d4>
 80037e0:	9b03      	ldr	r3, [sp, #12]
 80037e2:	3307      	adds	r3, #7
 80037e4:	f023 0307 	bic.w	r3, r3, #7
 80037e8:	3308      	adds	r3, #8
 80037ea:	9303      	str	r3, [sp, #12]
 80037ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ee:	444b      	add	r3, r9
 80037f0:	9309      	str	r3, [sp, #36]	; 0x24
 80037f2:	e750      	b.n	8003696 <_vfiprintf_r+0x42>
 80037f4:	fb05 3202 	mla	r2, r5, r2, r3
 80037f8:	2001      	movs	r0, #1
 80037fa:	4688      	mov	r8, r1
 80037fc:	e78a      	b.n	8003714 <_vfiprintf_r+0xc0>
 80037fe:	2300      	movs	r3, #0
 8003800:	f108 0801 	add.w	r8, r8, #1
 8003804:	9305      	str	r3, [sp, #20]
 8003806:	4619      	mov	r1, r3
 8003808:	250a      	movs	r5, #10
 800380a:	4640      	mov	r0, r8
 800380c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003810:	3a30      	subs	r2, #48	; 0x30
 8003812:	2a09      	cmp	r2, #9
 8003814:	d903      	bls.n	800381e <_vfiprintf_r+0x1ca>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0c3      	beq.n	80037a2 <_vfiprintf_r+0x14e>
 800381a:	9105      	str	r1, [sp, #20]
 800381c:	e7c1      	b.n	80037a2 <_vfiprintf_r+0x14e>
 800381e:	fb05 2101 	mla	r1, r5, r1, r2
 8003822:	2301      	movs	r3, #1
 8003824:	4680      	mov	r8, r0
 8003826:	e7f0      	b.n	800380a <_vfiprintf_r+0x1b6>
 8003828:	ab03      	add	r3, sp, #12
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	4622      	mov	r2, r4
 800382e:	4b13      	ldr	r3, [pc, #76]	; (800387c <_vfiprintf_r+0x228>)
 8003830:	a904      	add	r1, sp, #16
 8003832:	4630      	mov	r0, r6
 8003834:	f3af 8000 	nop.w
 8003838:	f1b0 3fff 	cmp.w	r0, #4294967295
 800383c:	4681      	mov	r9, r0
 800383e:	d1d5      	bne.n	80037ec <_vfiprintf_r+0x198>
 8003840:	89a3      	ldrh	r3, [r4, #12]
 8003842:	065b      	lsls	r3, r3, #25
 8003844:	f53f af7e 	bmi.w	8003744 <_vfiprintf_r+0xf0>
 8003848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800384a:	e77d      	b.n	8003748 <_vfiprintf_r+0xf4>
 800384c:	ab03      	add	r3, sp, #12
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4622      	mov	r2, r4
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <_vfiprintf_r+0x228>)
 8003854:	a904      	add	r1, sp, #16
 8003856:	4630      	mov	r0, r6
 8003858:	f000 f888 	bl	800396c <_printf_i>
 800385c:	e7ec      	b.n	8003838 <_vfiprintf_r+0x1e4>
 800385e:	bf00      	nop
 8003860:	080042bc 	.word	0x080042bc
 8003864:	080042fc 	.word	0x080042fc
 8003868:	080042dc 	.word	0x080042dc
 800386c:	0800429c 	.word	0x0800429c
 8003870:	08004302 	.word	0x08004302
 8003874:	08004306 	.word	0x08004306
 8003878:	00000000 	.word	0x00000000
 800387c:	0800362f 	.word	0x0800362f

08003880 <_printf_common>:
 8003880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003884:	4691      	mov	r9, r2
 8003886:	461f      	mov	r7, r3
 8003888:	688a      	ldr	r2, [r1, #8]
 800388a:	690b      	ldr	r3, [r1, #16]
 800388c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003890:	4293      	cmp	r3, r2
 8003892:	bfb8      	it	lt
 8003894:	4613      	movlt	r3, r2
 8003896:	f8c9 3000 	str.w	r3, [r9]
 800389a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800389e:	4606      	mov	r6, r0
 80038a0:	460c      	mov	r4, r1
 80038a2:	b112      	cbz	r2, 80038aa <_printf_common+0x2a>
 80038a4:	3301      	adds	r3, #1
 80038a6:	f8c9 3000 	str.w	r3, [r9]
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	0699      	lsls	r1, r3, #26
 80038ae:	bf42      	ittt	mi
 80038b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80038b4:	3302      	addmi	r3, #2
 80038b6:	f8c9 3000 	strmi.w	r3, [r9]
 80038ba:	6825      	ldr	r5, [r4, #0]
 80038bc:	f015 0506 	ands.w	r5, r5, #6
 80038c0:	d107      	bne.n	80038d2 <_printf_common+0x52>
 80038c2:	f104 0a19 	add.w	sl, r4, #25
 80038c6:	68e3      	ldr	r3, [r4, #12]
 80038c8:	f8d9 2000 	ldr.w	r2, [r9]
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	42ab      	cmp	r3, r5
 80038d0:	dc28      	bgt.n	8003924 <_printf_common+0xa4>
 80038d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	3300      	adds	r3, #0
 80038da:	bf18      	it	ne
 80038dc:	2301      	movne	r3, #1
 80038de:	0692      	lsls	r2, r2, #26
 80038e0:	d42d      	bmi.n	800393e <_printf_common+0xbe>
 80038e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038e6:	4639      	mov	r1, r7
 80038e8:	4630      	mov	r0, r6
 80038ea:	47c0      	blx	r8
 80038ec:	3001      	adds	r0, #1
 80038ee:	d020      	beq.n	8003932 <_printf_common+0xb2>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	68e5      	ldr	r5, [r4, #12]
 80038f4:	f8d9 2000 	ldr.w	r2, [r9]
 80038f8:	f003 0306 	and.w	r3, r3, #6
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	bf08      	it	eq
 8003900:	1aad      	subeq	r5, r5, r2
 8003902:	68a3      	ldr	r3, [r4, #8]
 8003904:	6922      	ldr	r2, [r4, #16]
 8003906:	bf0c      	ite	eq
 8003908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800390c:	2500      	movne	r5, #0
 800390e:	4293      	cmp	r3, r2
 8003910:	bfc4      	itt	gt
 8003912:	1a9b      	subgt	r3, r3, r2
 8003914:	18ed      	addgt	r5, r5, r3
 8003916:	f04f 0900 	mov.w	r9, #0
 800391a:	341a      	adds	r4, #26
 800391c:	454d      	cmp	r5, r9
 800391e:	d11a      	bne.n	8003956 <_printf_common+0xd6>
 8003920:	2000      	movs	r0, #0
 8003922:	e008      	b.n	8003936 <_printf_common+0xb6>
 8003924:	2301      	movs	r3, #1
 8003926:	4652      	mov	r2, sl
 8003928:	4639      	mov	r1, r7
 800392a:	4630      	mov	r0, r6
 800392c:	47c0      	blx	r8
 800392e:	3001      	adds	r0, #1
 8003930:	d103      	bne.n	800393a <_printf_common+0xba>
 8003932:	f04f 30ff 	mov.w	r0, #4294967295
 8003936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393a:	3501      	adds	r5, #1
 800393c:	e7c3      	b.n	80038c6 <_printf_common+0x46>
 800393e:	18e1      	adds	r1, r4, r3
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	2030      	movs	r0, #48	; 0x30
 8003944:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003948:	4422      	add	r2, r4
 800394a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800394e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003952:	3302      	adds	r3, #2
 8003954:	e7c5      	b.n	80038e2 <_printf_common+0x62>
 8003956:	2301      	movs	r3, #1
 8003958:	4622      	mov	r2, r4
 800395a:	4639      	mov	r1, r7
 800395c:	4630      	mov	r0, r6
 800395e:	47c0      	blx	r8
 8003960:	3001      	adds	r0, #1
 8003962:	d0e6      	beq.n	8003932 <_printf_common+0xb2>
 8003964:	f109 0901 	add.w	r9, r9, #1
 8003968:	e7d8      	b.n	800391c <_printf_common+0x9c>
	...

0800396c <_printf_i>:
 800396c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003970:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003974:	460c      	mov	r4, r1
 8003976:	7e09      	ldrb	r1, [r1, #24]
 8003978:	b085      	sub	sp, #20
 800397a:	296e      	cmp	r1, #110	; 0x6e
 800397c:	4617      	mov	r7, r2
 800397e:	4606      	mov	r6, r0
 8003980:	4698      	mov	r8, r3
 8003982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003984:	f000 80b3 	beq.w	8003aee <_printf_i+0x182>
 8003988:	d822      	bhi.n	80039d0 <_printf_i+0x64>
 800398a:	2963      	cmp	r1, #99	; 0x63
 800398c:	d036      	beq.n	80039fc <_printf_i+0x90>
 800398e:	d80a      	bhi.n	80039a6 <_printf_i+0x3a>
 8003990:	2900      	cmp	r1, #0
 8003992:	f000 80b9 	beq.w	8003b08 <_printf_i+0x19c>
 8003996:	2958      	cmp	r1, #88	; 0x58
 8003998:	f000 8083 	beq.w	8003aa2 <_printf_i+0x136>
 800399c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80039a4:	e032      	b.n	8003a0c <_printf_i+0xa0>
 80039a6:	2964      	cmp	r1, #100	; 0x64
 80039a8:	d001      	beq.n	80039ae <_printf_i+0x42>
 80039aa:	2969      	cmp	r1, #105	; 0x69
 80039ac:	d1f6      	bne.n	800399c <_printf_i+0x30>
 80039ae:	6820      	ldr	r0, [r4, #0]
 80039b0:	6813      	ldr	r3, [r2, #0]
 80039b2:	0605      	lsls	r5, r0, #24
 80039b4:	f103 0104 	add.w	r1, r3, #4
 80039b8:	d52a      	bpl.n	8003a10 <_printf_i+0xa4>
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6011      	str	r1, [r2, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	da03      	bge.n	80039ca <_printf_i+0x5e>
 80039c2:	222d      	movs	r2, #45	; 0x2d
 80039c4:	425b      	negs	r3, r3
 80039c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80039ca:	486f      	ldr	r0, [pc, #444]	; (8003b88 <_printf_i+0x21c>)
 80039cc:	220a      	movs	r2, #10
 80039ce:	e039      	b.n	8003a44 <_printf_i+0xd8>
 80039d0:	2973      	cmp	r1, #115	; 0x73
 80039d2:	f000 809d 	beq.w	8003b10 <_printf_i+0x1a4>
 80039d6:	d808      	bhi.n	80039ea <_printf_i+0x7e>
 80039d8:	296f      	cmp	r1, #111	; 0x6f
 80039da:	d020      	beq.n	8003a1e <_printf_i+0xb2>
 80039dc:	2970      	cmp	r1, #112	; 0x70
 80039de:	d1dd      	bne.n	800399c <_printf_i+0x30>
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	f043 0320 	orr.w	r3, r3, #32
 80039e6:	6023      	str	r3, [r4, #0]
 80039e8:	e003      	b.n	80039f2 <_printf_i+0x86>
 80039ea:	2975      	cmp	r1, #117	; 0x75
 80039ec:	d017      	beq.n	8003a1e <_printf_i+0xb2>
 80039ee:	2978      	cmp	r1, #120	; 0x78
 80039f0:	d1d4      	bne.n	800399c <_printf_i+0x30>
 80039f2:	2378      	movs	r3, #120	; 0x78
 80039f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039f8:	4864      	ldr	r0, [pc, #400]	; (8003b8c <_printf_i+0x220>)
 80039fa:	e055      	b.n	8003aa8 <_printf_i+0x13c>
 80039fc:	6813      	ldr	r3, [r2, #0]
 80039fe:	1d19      	adds	r1, r3, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6011      	str	r1, [r2, #0]
 8003a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e08c      	b.n	8003b2a <_printf_i+0x1be>
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6011      	str	r1, [r2, #0]
 8003a14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a18:	bf18      	it	ne
 8003a1a:	b21b      	sxthne	r3, r3
 8003a1c:	e7cf      	b.n	80039be <_printf_i+0x52>
 8003a1e:	6813      	ldr	r3, [r2, #0]
 8003a20:	6825      	ldr	r5, [r4, #0]
 8003a22:	1d18      	adds	r0, r3, #4
 8003a24:	6010      	str	r0, [r2, #0]
 8003a26:	0628      	lsls	r0, r5, #24
 8003a28:	d501      	bpl.n	8003a2e <_printf_i+0xc2>
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	e002      	b.n	8003a34 <_printf_i+0xc8>
 8003a2e:	0668      	lsls	r0, r5, #25
 8003a30:	d5fb      	bpl.n	8003a2a <_printf_i+0xbe>
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	4854      	ldr	r0, [pc, #336]	; (8003b88 <_printf_i+0x21c>)
 8003a36:	296f      	cmp	r1, #111	; 0x6f
 8003a38:	bf14      	ite	ne
 8003a3a:	220a      	movne	r2, #10
 8003a3c:	2208      	moveq	r2, #8
 8003a3e:	2100      	movs	r1, #0
 8003a40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a44:	6865      	ldr	r5, [r4, #4]
 8003a46:	60a5      	str	r5, [r4, #8]
 8003a48:	2d00      	cmp	r5, #0
 8003a4a:	f2c0 8095 	blt.w	8003b78 <_printf_i+0x20c>
 8003a4e:	6821      	ldr	r1, [r4, #0]
 8003a50:	f021 0104 	bic.w	r1, r1, #4
 8003a54:	6021      	str	r1, [r4, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d13d      	bne.n	8003ad6 <_printf_i+0x16a>
 8003a5a:	2d00      	cmp	r5, #0
 8003a5c:	f040 808e 	bne.w	8003b7c <_printf_i+0x210>
 8003a60:	4665      	mov	r5, ip
 8003a62:	2a08      	cmp	r2, #8
 8003a64:	d10b      	bne.n	8003a7e <_printf_i+0x112>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	07db      	lsls	r3, r3, #31
 8003a6a:	d508      	bpl.n	8003a7e <_printf_i+0x112>
 8003a6c:	6923      	ldr	r3, [r4, #16]
 8003a6e:	6862      	ldr	r2, [r4, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	bfde      	ittt	le
 8003a74:	2330      	movle	r3, #48	; 0x30
 8003a76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a7e:	ebac 0305 	sub.w	r3, ip, r5
 8003a82:	6123      	str	r3, [r4, #16]
 8003a84:	f8cd 8000 	str.w	r8, [sp]
 8003a88:	463b      	mov	r3, r7
 8003a8a:	aa03      	add	r2, sp, #12
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f7ff fef6 	bl	8003880 <_printf_common>
 8003a94:	3001      	adds	r0, #1
 8003a96:	d14d      	bne.n	8003b34 <_printf_i+0x1c8>
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	b005      	add	sp, #20
 8003a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003aa2:	4839      	ldr	r0, [pc, #228]	; (8003b88 <_printf_i+0x21c>)
 8003aa4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003aa8:	6813      	ldr	r3, [r2, #0]
 8003aaa:	6821      	ldr	r1, [r4, #0]
 8003aac:	1d1d      	adds	r5, r3, #4
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6015      	str	r5, [r2, #0]
 8003ab2:	060a      	lsls	r2, r1, #24
 8003ab4:	d50b      	bpl.n	8003ace <_printf_i+0x162>
 8003ab6:	07ca      	lsls	r2, r1, #31
 8003ab8:	bf44      	itt	mi
 8003aba:	f041 0120 	orrmi.w	r1, r1, #32
 8003abe:	6021      	strmi	r1, [r4, #0]
 8003ac0:	b91b      	cbnz	r3, 8003aca <_printf_i+0x15e>
 8003ac2:	6822      	ldr	r2, [r4, #0]
 8003ac4:	f022 0220 	bic.w	r2, r2, #32
 8003ac8:	6022      	str	r2, [r4, #0]
 8003aca:	2210      	movs	r2, #16
 8003acc:	e7b7      	b.n	8003a3e <_printf_i+0xd2>
 8003ace:	064d      	lsls	r5, r1, #25
 8003ad0:	bf48      	it	mi
 8003ad2:	b29b      	uxthmi	r3, r3
 8003ad4:	e7ef      	b.n	8003ab6 <_printf_i+0x14a>
 8003ad6:	4665      	mov	r5, ip
 8003ad8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003adc:	fb02 3311 	mls	r3, r2, r1, r3
 8003ae0:	5cc3      	ldrb	r3, [r0, r3]
 8003ae2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	2900      	cmp	r1, #0
 8003aea:	d1f5      	bne.n	8003ad8 <_printf_i+0x16c>
 8003aec:	e7b9      	b.n	8003a62 <_printf_i+0xf6>
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	6825      	ldr	r5, [r4, #0]
 8003af2:	6961      	ldr	r1, [r4, #20]
 8003af4:	1d18      	adds	r0, r3, #4
 8003af6:	6010      	str	r0, [r2, #0]
 8003af8:	0628      	lsls	r0, r5, #24
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	d501      	bpl.n	8003b02 <_printf_i+0x196>
 8003afe:	6019      	str	r1, [r3, #0]
 8003b00:	e002      	b.n	8003b08 <_printf_i+0x19c>
 8003b02:	066a      	lsls	r2, r5, #25
 8003b04:	d5fb      	bpl.n	8003afe <_printf_i+0x192>
 8003b06:	8019      	strh	r1, [r3, #0]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6123      	str	r3, [r4, #16]
 8003b0c:	4665      	mov	r5, ip
 8003b0e:	e7b9      	b.n	8003a84 <_printf_i+0x118>
 8003b10:	6813      	ldr	r3, [r2, #0]
 8003b12:	1d19      	adds	r1, r3, #4
 8003b14:	6011      	str	r1, [r2, #0]
 8003b16:	681d      	ldr	r5, [r3, #0]
 8003b18:	6862      	ldr	r2, [r4, #4]
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	f7fc fb7f 	bl	8000220 <memchr>
 8003b22:	b108      	cbz	r0, 8003b28 <_printf_i+0x1bc>
 8003b24:	1b40      	subs	r0, r0, r5
 8003b26:	6060      	str	r0, [r4, #4]
 8003b28:	6863      	ldr	r3, [r4, #4]
 8003b2a:	6123      	str	r3, [r4, #16]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b32:	e7a7      	b.n	8003a84 <_printf_i+0x118>
 8003b34:	6923      	ldr	r3, [r4, #16]
 8003b36:	462a      	mov	r2, r5
 8003b38:	4639      	mov	r1, r7
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	47c0      	blx	r8
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d0aa      	beq.n	8003a98 <_printf_i+0x12c>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	079b      	lsls	r3, r3, #30
 8003b46:	d413      	bmi.n	8003b70 <_printf_i+0x204>
 8003b48:	68e0      	ldr	r0, [r4, #12]
 8003b4a:	9b03      	ldr	r3, [sp, #12]
 8003b4c:	4298      	cmp	r0, r3
 8003b4e:	bfb8      	it	lt
 8003b50:	4618      	movlt	r0, r3
 8003b52:	e7a3      	b.n	8003a9c <_printf_i+0x130>
 8003b54:	2301      	movs	r3, #1
 8003b56:	464a      	mov	r2, r9
 8003b58:	4639      	mov	r1, r7
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	47c0      	blx	r8
 8003b5e:	3001      	adds	r0, #1
 8003b60:	d09a      	beq.n	8003a98 <_printf_i+0x12c>
 8003b62:	3501      	adds	r5, #1
 8003b64:	68e3      	ldr	r3, [r4, #12]
 8003b66:	9a03      	ldr	r2, [sp, #12]
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	42ab      	cmp	r3, r5
 8003b6c:	dcf2      	bgt.n	8003b54 <_printf_i+0x1e8>
 8003b6e:	e7eb      	b.n	8003b48 <_printf_i+0x1dc>
 8003b70:	2500      	movs	r5, #0
 8003b72:	f104 0919 	add.w	r9, r4, #25
 8003b76:	e7f5      	b.n	8003b64 <_printf_i+0x1f8>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1ac      	bne.n	8003ad6 <_printf_i+0x16a>
 8003b7c:	7803      	ldrb	r3, [r0, #0]
 8003b7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b86:	e76c      	b.n	8003a62 <_printf_i+0xf6>
 8003b88:	0800430d 	.word	0x0800430d
 8003b8c:	0800431e 	.word	0x0800431e

08003b90 <_putc_r>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	460d      	mov	r5, r1
 8003b94:	4614      	mov	r4, r2
 8003b96:	4606      	mov	r6, r0
 8003b98:	b118      	cbz	r0, 8003ba2 <_putc_r+0x12>
 8003b9a:	6983      	ldr	r3, [r0, #24]
 8003b9c:	b90b      	cbnz	r3, 8003ba2 <_putc_r+0x12>
 8003b9e:	f7ff fc3f 	bl	8003420 <__sinit>
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <_putc_r+0x60>)
 8003ba4:	429c      	cmp	r4, r3
 8003ba6:	d112      	bne.n	8003bce <_putc_r+0x3e>
 8003ba8:	6874      	ldr	r4, [r6, #4]
 8003baa:	68a3      	ldr	r3, [r4, #8]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	60a3      	str	r3, [r4, #8]
 8003bb2:	da16      	bge.n	8003be2 <_putc_r+0x52>
 8003bb4:	69a2      	ldr	r2, [r4, #24]
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	db02      	blt.n	8003bc0 <_putc_r+0x30>
 8003bba:	b2eb      	uxtb	r3, r5
 8003bbc:	2b0a      	cmp	r3, #10
 8003bbe:	d110      	bne.n	8003be2 <_putc_r+0x52>
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003bca:	f7ff ba79 	b.w	80030c0 <__swbuf_r>
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <_putc_r+0x64>)
 8003bd0:	429c      	cmp	r4, r3
 8003bd2:	d101      	bne.n	8003bd8 <_putc_r+0x48>
 8003bd4:	68b4      	ldr	r4, [r6, #8]
 8003bd6:	e7e8      	b.n	8003baa <_putc_r+0x1a>
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <_putc_r+0x68>)
 8003bda:	429c      	cmp	r4, r3
 8003bdc:	bf08      	it	eq
 8003bde:	68f4      	ldreq	r4, [r6, #12]
 8003be0:	e7e3      	b.n	8003baa <_putc_r+0x1a>
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	6022      	str	r2, [r4, #0]
 8003be8:	701d      	strb	r5, [r3, #0]
 8003bea:	b2e8      	uxtb	r0, r5
 8003bec:	bd70      	pop	{r4, r5, r6, pc}
 8003bee:	bf00      	nop
 8003bf0:	080042bc 	.word	0x080042bc
 8003bf4:	080042dc 	.word	0x080042dc
 8003bf8:	0800429c 	.word	0x0800429c

08003bfc <__sread>:
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	460c      	mov	r4, r1
 8003c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c04:	f000 f894 	bl	8003d30 <_read_r>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	bfab      	itete	ge
 8003c0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c10:	181b      	addge	r3, r3, r0
 8003c12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c16:	bfac      	ite	ge
 8003c18:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c1a:	81a3      	strhlt	r3, [r4, #12]
 8003c1c:	bd10      	pop	{r4, pc}

08003c1e <__swrite>:
 8003c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c22:	461f      	mov	r7, r3
 8003c24:	898b      	ldrh	r3, [r1, #12]
 8003c26:	05db      	lsls	r3, r3, #23
 8003c28:	4605      	mov	r5, r0
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	4616      	mov	r6, r2
 8003c2e:	d505      	bpl.n	8003c3c <__swrite+0x1e>
 8003c30:	2302      	movs	r3, #2
 8003c32:	2200      	movs	r2, #0
 8003c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c38:	f000 f868 	bl	8003d0c <_lseek_r>
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c46:	81a3      	strh	r3, [r4, #12]
 8003c48:	4632      	mov	r2, r6
 8003c4a:	463b      	mov	r3, r7
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c52:	f000 b817 	b.w	8003c84 <_write_r>

08003c56 <__sseek>:
 8003c56:	b510      	push	{r4, lr}
 8003c58:	460c      	mov	r4, r1
 8003c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c5e:	f000 f855 	bl	8003d0c <_lseek_r>
 8003c62:	1c43      	adds	r3, r0, #1
 8003c64:	89a3      	ldrh	r3, [r4, #12]
 8003c66:	bf15      	itete	ne
 8003c68:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c72:	81a3      	strheq	r3, [r4, #12]
 8003c74:	bf18      	it	ne
 8003c76:	81a3      	strhne	r3, [r4, #12]
 8003c78:	bd10      	pop	{r4, pc}

08003c7a <__sclose>:
 8003c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c7e:	f000 b813 	b.w	8003ca8 <_close_r>
	...

08003c84 <_write_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	4c07      	ldr	r4, [pc, #28]	; (8003ca4 <_write_r+0x20>)
 8003c88:	4605      	mov	r5, r0
 8003c8a:	4608      	mov	r0, r1
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	2200      	movs	r2, #0
 8003c90:	6022      	str	r2, [r4, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f7fd fae5 	bl	8001262 <_write>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d102      	bne.n	8003ca2 <_write_r+0x1e>
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	b103      	cbz	r3, 8003ca2 <_write_r+0x1e>
 8003ca0:	602b      	str	r3, [r5, #0]
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
 8003ca4:	200000dc 	.word	0x200000dc

08003ca8 <_close_r>:
 8003ca8:	b538      	push	{r3, r4, r5, lr}
 8003caa:	4c06      	ldr	r4, [pc, #24]	; (8003cc4 <_close_r+0x1c>)
 8003cac:	2300      	movs	r3, #0
 8003cae:	4605      	mov	r5, r0
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	f7fd faf1 	bl	800129a <_close>
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	d102      	bne.n	8003cc2 <_close_r+0x1a>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	b103      	cbz	r3, 8003cc2 <_close_r+0x1a>
 8003cc0:	602b      	str	r3, [r5, #0]
 8003cc2:	bd38      	pop	{r3, r4, r5, pc}
 8003cc4:	200000dc 	.word	0x200000dc

08003cc8 <_fstat_r>:
 8003cc8:	b538      	push	{r3, r4, r5, lr}
 8003cca:	4c07      	ldr	r4, [pc, #28]	; (8003ce8 <_fstat_r+0x20>)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	4605      	mov	r5, r0
 8003cd0:	4608      	mov	r0, r1
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	f7fd faec 	bl	80012b2 <_fstat>
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	d102      	bne.n	8003ce4 <_fstat_r+0x1c>
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	b103      	cbz	r3, 8003ce4 <_fstat_r+0x1c>
 8003ce2:	602b      	str	r3, [r5, #0]
 8003ce4:	bd38      	pop	{r3, r4, r5, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200000dc 	.word	0x200000dc

08003cec <_isatty_r>:
 8003cec:	b538      	push	{r3, r4, r5, lr}
 8003cee:	4c06      	ldr	r4, [pc, #24]	; (8003d08 <_isatty_r+0x1c>)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	4605      	mov	r5, r0
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	6023      	str	r3, [r4, #0]
 8003cf8:	f7fd faeb 	bl	80012d2 <_isatty>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	d102      	bne.n	8003d06 <_isatty_r+0x1a>
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	b103      	cbz	r3, 8003d06 <_isatty_r+0x1a>
 8003d04:	602b      	str	r3, [r5, #0]
 8003d06:	bd38      	pop	{r3, r4, r5, pc}
 8003d08:	200000dc 	.word	0x200000dc

08003d0c <_lseek_r>:
 8003d0c:	b538      	push	{r3, r4, r5, lr}
 8003d0e:	4c07      	ldr	r4, [pc, #28]	; (8003d2c <_lseek_r+0x20>)
 8003d10:	4605      	mov	r5, r0
 8003d12:	4608      	mov	r0, r1
 8003d14:	4611      	mov	r1, r2
 8003d16:	2200      	movs	r2, #0
 8003d18:	6022      	str	r2, [r4, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f7fd fae4 	bl	80012e8 <_lseek>
 8003d20:	1c43      	adds	r3, r0, #1
 8003d22:	d102      	bne.n	8003d2a <_lseek_r+0x1e>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	b103      	cbz	r3, 8003d2a <_lseek_r+0x1e>
 8003d28:	602b      	str	r3, [r5, #0]
 8003d2a:	bd38      	pop	{r3, r4, r5, pc}
 8003d2c:	200000dc 	.word	0x200000dc

08003d30 <_read_r>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	4c07      	ldr	r4, [pc, #28]	; (8003d50 <_read_r+0x20>)
 8003d34:	4605      	mov	r5, r0
 8003d36:	4608      	mov	r0, r1
 8003d38:	4611      	mov	r1, r2
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	6022      	str	r2, [r4, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f7fd fa72 	bl	8001228 <_read>
 8003d44:	1c43      	adds	r3, r0, #1
 8003d46:	d102      	bne.n	8003d4e <_read_r+0x1e>
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	b103      	cbz	r3, 8003d4e <_read_r+0x1e>
 8003d4c:	602b      	str	r3, [r5, #0]
 8003d4e:	bd38      	pop	{r3, r4, r5, pc}
 8003d50:	200000dc 	.word	0x200000dc

08003d54 <_init>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	bf00      	nop
 8003d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5a:	bc08      	pop	{r3}
 8003d5c:	469e      	mov	lr, r3
 8003d5e:	4770      	bx	lr

08003d60 <_fini>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	bf00      	nop
 8003d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d66:	bc08      	pop	{r3}
 8003d68:	469e      	mov	lr, r3
 8003d6a:	4770      	bx	lr
